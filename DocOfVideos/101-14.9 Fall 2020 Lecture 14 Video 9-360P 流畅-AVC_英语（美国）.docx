all right in this last lecture we're going to talk about as i promised karnoff maps which are a very simple technique for optimizing your circuit design that is by minimizing the number of gates not to the true minimum but reducing i should say the number of gates that you're going to have to use to implement a particular uh truth table and expression so let's imagine this very simple it doesn't matter what the output here but imagine i have 4 in so how many rows do i have with 4 in 2 to the 4 which is 16 and i have one output which is e here and i've just color coded it slightly different okay so we could do what we've been doing up until now we could identify all of the ones here there's one there there's one there etcetera etcetera etcetera build the sub expressions from these four inputs using and not combine them with or draw the circuitry but you can see this is going to get to be a fairly large circuit but let's just go ahead and pump through that as a good reminder then we're going to see how we can do a little bit better all right so what are we going to do again we're going to go down through the output and isolate the ones there there there there there there okay and we're going to build the sub-expression so let's build the first one you go back to the input not a b c not d there it is right there let's go to the next one what's the sub expression a not b not c not d good that one there it is right there now let's do a couple more just as for practice i've got what a not b not c d all right that's pretty easy let's do another one a not b c not d and now i think we can probably just go ahead and do the rest okay so just convince yourself that those all map back to those sub expressions so okay so we've got a bunch of knottings we got a whole bunch of and gates and of course i can combine those with an or gate and we can keep through that process okay and you can see that there's a fair amount of circuitry all those and gates all those little dots corresponds to a gate which corresponds to two transistors i'm going to have ores to combine all of these those correspond to two transistors and as i said earlier it'd be nice if we could try to reduce the amount of gates and therefore transistors and therefore the amount of space on the underlying circuitry so what i'm going to do is i'm the way these karnoff maps work there it is right there karnoff that's how you spell it is they reimagine the truth table and the way we're going to draw this truth table is instead of having um each entry for the four inputs take a single row we're going to have them occupy this little four by four matrix so notice what i have up here up top i have the input pair a b and on the side i have the input pair cd so this entry corresponds to when a is zero and b is zero a is zero b is one a is one b is one and uh a is one and b is zero okay so and then this of course corresponds to what c and d is c is zero d is zero down to c is one and d is zero and notice by the way that there's no loss of information this is four by four which is 16 which is how many rows i have so each cell here corresponds to a row so it's simply a different visualization of the standard truth table and so how do i uh populate it well for any cell here i know what row it corresponds to so for example let's do the cell this cell is a is zero b is zero c is zero d is zero that's that row right there this cell is one zero zero zero so that must be this one right here so there is a direct translation every row here in particular those outputs gets shoved into here now obviously i need a different one of these for each of the outputs this is only for one output okay all right so let's go ahead and just start populating it all right there's zero zero zero zero i know what the output is zero so i put a zero in this now let's call it a two two-dimensional truth table uh let's do this one uh one zero zero zero that's this row right there there's a one so i put a one right there let's do a few more so this corresponds to one one 1 1. let's see there it is right there and i've put a zero here by the way notice the ordering here um i've got 0 0 0 1 and then i've got 1 1 and 1 0. that ordering matters you have to do it in this order and i'm going to explain in a little bit why this ordering matters okay but until i do that notice that this bit right here the second zero and the first zero are the same the second one and the first one are the same the second one and the first one the same that's not an accident the same of course is true here we're going to take advantage of that structure in a minute all right let's do one more 0 1 1 0 that corresponds to let's see 0 1 0 one that oops sorry zero one one zero zero one one zero that's a one so i'm gonna put a one right there okay good so i can go there's a direct mapping from this one dimensional truth table to this two dimensional truth table and all this information is here this is exactly what i want i want the circuitry to be one for these inputs here here here and here and at zero everywhere else okay so how does this help me all right well let's look at a few things here let's look at this string of ones right here okay so remember again conceptually what do i want i want to build some expressions that evaluate to one here here and here and if i can do that i'm home then i've implemented this computation that i've specified in the truth table look at this expression right here okay well let's see uh for a 1 to be here do i care what the value of c or d is no because notice no matter what pairs of values c of d are this thing is a one right and in fact it's a one when a is one and b is zero no matter what the value of c and d are ah that's interesting okay so what that means is if i have this little expression right here a not b how did i get that a not b so when a is one and b is zero which means that and is one i want a one on my output i don't care what c is it's completely irrelevant to me yeah so notice when i just did a single sub expression with one end and one knot gave me four rows of my truth table that's incredible that's incredibly efficient right and i did it because i've noticed this pattern and and of course that's because i've put this in this nice little two-dimensional truth table is that these four ones don't depend on c and d and all i care about is then that value right there so there's a big bang for your buck i've gotten four ones out from a single sub expression with one hand and one not very nice all right so now what do i have to do i still need remember all i've got to do is build an expression that evaluates to one that occupies all of these cells right here so once i get those covered i've got and then i can start building my circuitry all right so let's do the let's look at this one right here so there's two ones next to each other and let's see so it's not quite as clean as here i can't just ignore a b or c d it just still depends on both of them but what do i know here what what doesn't matter let's put it this way well there's a one here and here when what is true well when c is one and and d is zero so that's clear right we have to be in this row of the two two dimensional truth table now do i care what the value of a and b are yes because it's not a one across the whole thing it almost is because i had a one here but i don't have a one there so if i had a one here then i'd have that same win i'd get them all yeah but what don't i care about well let's see a is zero here and a is one here those are the only two possible values so in fact these two ones right here don't depend on a and they only depend on b equal to one so let's see what it is when c is one and d is zero and b is one then i get those two ones right there nice it's not quite as much of a big as a bang for as you got here but it's certainly saving something so when b is one and when c is zero and b is one c is zero and d is uh sorry d c is one and d is zero so b c not d i that little sub expression evaluates to one in these two situations so again one sub expression with only three variables by the way because a is irrelevant here gives me two ones nice all right so we're almost home we've just got to cover those two okay so i could do the same trick i could draw a little colored box right here and what would be true a would have to be one and b would have to be one and what else is true i don't care about d because d can flip between zero and one so i could have written another expression that was a b and not c and i would have gotten those two right there but it turns out we can do a little bit better so let's think about not just those two but these four okay so notice that they're overlapping with the previous one we'll get back to that in a little bit all right what doesn't matter here all right but what do i know i know that in order to get these ones here c must be zero right c can't be one and i also know that a must be a one that take that so think about that thing c equals zero carves out rows a equals one carves out these two columns the intersection is that little square so these four ones right here don't depend on b because b can be one or zero they don't depend on d because that could be zero or one and the only thing i care about is when is a one and when is c and what's that a sub expression a not c now notice that this sub expression let me put them all up here this little sub expression a and not c will vary to one in these four instances this little sub expression here a not b will evaluate to one in these four instances there's an overlap do i care no what do i care so let's think about this situation right here where a is one b is zero and c is zero and d is zero so what's going to happen in our expression here this will evaluate to one this will evaluate to zero and this will value to one great two and one i only need one of them but where do i care i'm going to get a one at the output and it doesn't matter that these two sub-expressions both said yes i'm here because it's irrelevant to us when we or as long as one or more of them is one we're still going to get the same answer so you're allowed to overlap these things and what's the benefit of overlapping why did i overlap is well the sub expression was easier i only hit simpler shorter i only have two variables instead of three variables the way i did over here with this one right here so notice what happened now by simply drawing this karnoff map this two-dimensional truth table i was able to take well let's go ahead and look at the comparison these sub-expressions here right and then of course i have to combine them with or and i could reduce them to those three little tiny sub-expressions and so the amount of circuitry the amount of gates is greatly reduced now the current offs map are really just one of many many different techniques for doing optimizations and in fact reducing the number of gates and transistors is only one of many optimizations you have to do you also have to think about where are things positioned and how much power and lots of complexities in designing circuitry but what i hope that you got out of this from the very beginning of when we started with binary numbers through boolean logic through gates through transistors and eventually circuit design is an appreciation for the nature of computation you now know the building blocks of a modern day computer and how we can do actual computations and there's a certain simplicity and beauty to it and a remarkable complexity to actually get it working and i hope someday you'll be able to take a computer architecture course and learn some more about it all right that's it for now and that's it this is the last lecture we'll see you live in a little bit and we'll talk some more before the class 