Our next topic is just a bunch of different  Python features that will help you in developing   your projects and doing your homework. okay so  I'm going to start up Python. now one thing we   haven't really discussed much since the first  day is how operators work - such as plus or times   well the truth is that exactly how they work  is kind of complicated and so we're going to   delay that discussion until later in the course.  for now just think of them as being shorthand   for calling built-in functions such as add  and mul. so this is the same thing as from   operator import add mul, and the using in fix  operators like this does obey the precedence   rule. so times comes before addition. if we want to  translate that into a call expression we have   to work it out ourselves. so we have to know  that this is equivalent to adding 2 to the   result of multiplying 3 and 4 and then adding 5  at the end. now you can use parentheses if you want   in expressions that include inflict operators  in order to change the precedence or override   the standard precedence. so this would  do the addition first and then multiply together   the two results 5 and 9 and you can likewise  express that by saying multiply add 2 + 3   and add 4 + 5. okay so operators just behave like  built-in function calls. enough of this addition   multiplication stuff. let's get serious let's talk  about division. so there are two kinds of division you can divide. this is called true division and it  uses the slash. or we can do what's called integer   division, which only gives the number of times that  the divisor goes into the dividend, not including   any remainder. so we lost the point three. these  have corresponding functions from operator import   truediv and floordiv, the first of the second so I  got truediv 2013 10 and I'll get 201.3   or I can floordiv  2013 and I'll get the 201. what   about the 3? well we can get the 3 as  well with what's called the mod operator   so this says what's the remainder of dividing  2013 by 10 and that will be 3. and there's   a corresponding function. why do we want these  integer division and mod operators? well they are   exact whereas you only get an approximation if I  say 5/3 I get 1.66667, when   really I should have 6s forever but it's more  exact to say that if I divide 5 by 3, well   3 only goes into five once and the remainder is  2 oh sorry the remainder of dividing 5 by 3 is 2 okay so we'll use those occasionally in the course  to break apart numbers so it's good to know how   they work. here's another feature of Python is  that just as I can assign multiple values to   multiple names using one assignment statement I  can also return multiple values from a function   and you'll do this once in your project. so let's  say I want both the quotient and the remainder to   come back when I divide n by d then I can define  a function by exact n by d which will return not   only the result of dividing n by d but also the  remainder. then I can assign to the quotient and   the remainder the result of dividing exactly  2013 by 10 and now quotient is bounded to 201 and   remainder is bound to 3. cool! ok so far throughout  the lectures I've only been using the interactive   Python interpreter. it's a really nice way to play  with ideas but if you want to write something   permanent you usually do it in a file. I have a  file over here edited with the vim editor. there   are several different editors that you can use,  look at lab 1 and it will give you an overview   of different options. so what happens here is I  start typing Python source code and it won't get   evaluated or executed until I ask Python to do so.  so it's a good idea to put some text at   the top saying what this file is. our first Python  source file. next you can just start defining   functions with def statements. divide exact n by  d is going to be return. we want floordiv n d   and then we want mod n d. oh I just noticed that  I forgot to import these things. well I can just   do that now. now none of this has been executed  yet. where we execute it is that we go back into   our shell. we type Python 3 and then the name  of the file. this file is called ex.py and   it gets executed. nothing really happened, so why  is that? well we have just a def statement which   binds the name divided exact to a newly created  function, but otherwise doesn't give us any output.
okay, so if instead I go over here and I say  Q comma R equals divide exact 2013 by 10 and   I save that and I execute it, still nothing  happens. but if I finally print something out   a quotient is q the remainder is r. I save that  and I execute it, then I'll actually get something   useful out. okay so what have we learned? well  we've learned that we can type Python into   files and we can execute it in this way. now a  more typical thing is not to have a bunch of   print statements in our Python file but  instead run Python 3 in the interactive   mode, first executing some file. so now we've  executed this entire file and then we have   an interactive prompt. which means we can now  look at q and look at r or call divide exact.
all right. now when you write functions in a Python  source file you don't typically just give them a   name and a return statement. in addition you give  them some documentation about what they do. return   the quotient and remainder of dividing n by d.  so there's a convention of using capital all   caps letters to refer to the formal parameters.  you don't have to follow this but we do it in   our projects. okay so we give some documentation.  that's called the doc string. it's the first line   below the def line in a def statement. in addition,  for just describing for humans what this does, we   can also show some examples of how it works. when  I get rid of this - and I'm going to put it up   here so I can say here's what would happen if  you called divide exact on 2013 and 10 and   you have bound those two Q and R respectively and  then you looked up Q you should get 201. and   when you look up r you should get 3. now this  is still just documentation. everything in here   is not Python code, it's just one big string that  tells you how this is supposed to work. but within   it I have an example interactive session and  I can simulate that session by typing Python 3 - M   doc tests and then the name of the file. now if  everything does what it's supposed to do you'll   see no output. if you'd like to see more output  you can pass the - B option which will tell you   everything that happened. so it actually did all  of these things that I told it to do. it tried   to assign Q and R to the result of divide exact.  it expected nothing to follow that and that was   true. and then we evaluated Q got 201 evaluated R  and we got 3. and if for instance I put some error   in here then if I run the same thing I will  see a lot of stars telling us the something   went wrong. failed example r is expected to be 2 - instead I got three. so these are called doc   tests and they're run by invoking the doc test  module on a particular file. it's a good idea   to try that when you're doing your homework.  one last feature. when you're defining a function   you can give what are called default values.  this is not an assignment statement. this is   instead a placeholder for a default value that  I put after a formal parameter. and what this   says is if there's no argument passed  in to be bound to D then I'll bind ten to D   instead which means I can let's - python 3 dash i ex.py run this interactively if I Q R equals   divide exact 2013 with no second argument then  it will fill in ten as the second argument and   I'll get Q is 201 and R is 3. we'll use  these in our project a little bit as well.
