Let's talk about dictionary iteration, you can get  multiple views of the contents of a dictionary,   which are different objects that are all iterable.
An iterable value is any value that can be passed   to iter, the built-in function, to produce an  iterator. An iterator is returned from iter and   can be passed to the built-in next function.
All iterators are mutable objects.  And when you call next on them, they  mutate to point to the next element.  A dictionary, and its keys and its values,  and its items are all iterable values,   all can be passed into iter, and the  resulting iterators can be passed into next.  The order of items in a dictionary is  the order in which they were added.  This is true of the most recent versions  of Python, starting at Python 3.6.  However, in older versions of Python, items in  a dictionary appeared in an arbitrary order,   dictionaries were called unordered collections  of key-value pairs as a result. But now they   are ordered. Although when you write Python  code, it's a good idea to keep in mind that   depending on the version of Python  that people use to run your program,   ordering of dictionaries may not be reliable.  But I'll assume in my examples, that we're using   a recent version of Python, and therefore  dictionaries will end up ordered according   to how they were constructed. So if I have a  dictionary with three keys, and three values,   one is bound to 1, two to 2, three to 3, and then  I add a fourth value, zero is bound to 0, then I   would expect that iterating over the keys would  give me 123, and then 0, because 0 was added last.  And here's how I iterate over the keys. I say,  I want an iterator by calling the iter function   over the keys. If you don't say d.keys, but  instead just say d, you get the same effect,   you iterate over the keys. And this k is an  iterator over keys, which means if I asked for   the next one, I'll get one, then two, then three,  then zero. If instead, I wanted to iterate over   the values in a dictionary, I would ask for  the values. This object is an iterable object   that provides access to all of the values in the  order that the dictionary was constructed. So the   next value is one, then two, then three, then  zero. And finally, I can ask for items in the   dictionary. Those are key-value pairs represented  as tuples. So the first one is one where we get   both the key and the value in a two-element  tuple and then two, then three, then zero.  So there are many ways to iterate over the  contents of a dictionary. And the way that Python   is designed, there's only one dictionary, d.
I can access different views of it by asking   for the keys, values, or items. And I  can get an iterator for any of those.  Now, one interesting thing to note is that  if I have a dictionary, and I've already   constructed an iterator over the keys, and I'm  in the middle of iterating over those keys,   and I change the dictionary. Now it's the case  that the iterator is invalid. And so I see this   error dictionary changed size during iteration,  which says that I cannot use k anymore because the   dictionary has been mutated while I was using k.  So our dictionary now looks like this. If I just   change the value for one of the keys while I'm  iterating through the keys, so here's one, two,   and then I change zero to 5, I can continue to  iterate because I haven't changed the shape or   the structure of the dictionary. I've just  changed one of the values for the keys. But   if the dictionary changes size, then I can't use  any of the iterators I've constructed. Instead,   I need to make new ones. And that's  true for keys, values, or items.
