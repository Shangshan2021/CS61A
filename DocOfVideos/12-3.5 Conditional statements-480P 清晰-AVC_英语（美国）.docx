Next, we'll talk about conditional statements.  So first, let's talk about statements. We saw   assignment statements and def statements. In  general, a statement is something executed   by the interpreter to perform some action like  bind a name to a value or define a new function.
now statements can spend more than one line so  a compound statement has the following structure   it starts with some header as some statements  indented sometimes there's a separating header   to continue the compound statement and that has  statements indented after it etc this whole thing   can be a statement within it a clause is a single  header followed by some indented statements and   those indented statements are called the suite  of the clause the first header determines the   statements type so you can always tell what sort  of statement you're dealing with and the header of   a clause controls the suite that follows def  statements as we saw are a type of compound   statement meaning they have a suite which we  call the body of the function being defined   okay so that's a statement when you look at a  compound statement and you're interested in the   suite oftentimes you execute that suite because  it's a sequence of statements to execute a suite   means to execute a sequence of statements in  order one after the other so if we want to write   down the rule for that its execute the first  statement and then unless directed otherwise   execute the rest now we can turn to a particular  type of statement that we haven't seen before the   conditional statement okay so we'll get out of  the Python interpreter and we'll actually just   define a new function in our file that allows us  to use a conditional statement to compute absolute   values return the absolute value of X and the way  we're going to do that is we're going to look at   whether X is smaller than larger than or equal to  zero so if X is less than zero and the absolute   value of x is negative x otherwise we write l-lift  that's else if an abbreviation for that this means   otherwise if it's the case that x equals zero and  we'll return zero and finally if neither of those   are true that means x is greater than zero we  will return X is so okay this is an absolute value   function we can load it by starting an interactive  session and first reading in exp so now we have   absolute value defined when I take the absolute  value of negative 2 I get 2 or of 0 I get 0 or   of 3 I get 3 now of course there was a filt in abs  function all along but I just wanted to give you   an example ok let's understand how that works so  here's the code that I wrote what is in the body   of this function is one statement that includes  three clauses one two three three headers that's   the first line of each Clause and three Suites  each of which just includes a return statement   okay so there's an execution rule for conditional  statements it goes consider each Clause in order   evaluate the headers expression if it is a true  value execute the suite for that Clause and skip   the remaining clauses so conditional statements  are interesting because only one of the Suites   ever gets executed now about the syntax of a  conditional statement you always start with an   if clause you're going to have zero or more Elif  clauses and then zero or one else clause but it   has to be at the end so the simplest version just  has an if clause you can have if and then else   or you can have some ellipse in the middle okay  let's understand this execution rule more deeply   by introducing our friend George Boole George  Boole was a logician he was in fact an important   logician and an early founder of computer  science he is really important so let's make   them big George is going to be interested in what  are called boolean contexts so those are places   in Python code where you place an expression but  all that matters about that expression is whether   it's true or false in this conditional statement  there are two boolean contexts one in each header   except for the else header which doesn't have one  so here we have expressions where we don't really   care about the value itself but only whether that  value is a true value or a false value that's all   George Boole cares about now there are false  values in Python such as false zero the empty   string or none and there are some more to come  but that's a good start and then there are true   values in Python which are anything that's not  a false value so George watches over these and   sees whether they're true or false and that  allows us to execute this statement correctly   there's some more details about boolean contexts  that you should probably read about because I'm   not going to go over all their details in  this lecture so here's a link to the reading 