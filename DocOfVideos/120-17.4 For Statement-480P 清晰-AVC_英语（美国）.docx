For statements iterate over iterable values.  They can also iterate over iterators themselves.  Let's say I have a range from 3 to 6. The  contents of that range are the numbers,   3, 4, and 5. If I iterate over that range, I  see all of the elements. And if I do it again,   I see all the elements again,  because I haven't changed the range.  Iterators are a little different. So if  I get a range iterator from my range,   this has a particular position  in the range associated with it,   which changes every time I call next. So I  can ask for each element in the rest of the   iterator. But it will not print out 3 because 3  is passed. Instead, we'll just print out 4 and 5.  Now, for statements also move the marker  within the iterator, advancing it all the   way to the end of the sequence. So I still  have my range. I'm going to build a new range   iterator that starts at the very beginning. And  for every element in ri, I'm going to print out   i. So I've passed a range iterator to the for  statement to be processed. Now there's nothing   left in the range iterator. If I iterate over  it again, I see nothing. Because I'm already at   the end of ri. That's another consequence  of using an iterator in a for statement.
So to summarize, if I use an iterator in a  for statement, I can still go through all of   the elements until I reach the end. But that will  advance the iterator so that I can't use it again.  On the other hand, if I'm working with an  iterable object, like the range itself,   every time I use that in a for statement,  I'm able to go through the entire contents   from beginning to end without worrying  about anything changing as I do so.
