welcome back we're now ready to start a bit of a new chapter in the course which is we're going to be talking about classes and objects and in particular object-oriented programming which may be something you've heard about and we're going to spend the next full three lectures uh talking about exactly what that is so let's just go ahead and dive in all right let me just define a few simple terms a class is something that combines and abstracts out data and functionality and it's important to understand those two things data and functionality up until now we have been talking about really mostly functionality a little bit on data when we talked about lists a little bit about data when we talked about different types of variable types but for the most part we've been focused on functionality iterative constructs conditional constructs function parameters in parameters out recursion and now we're going to talk about sort of putting all these pieces together and how we combine of course data and functions and so what a class does is it combines the storing of information data and functionality on that data an object is just an instantiation of a class and i want to distinguish between these two because it's a really important because i'm going to be using the words but it's also an important conceptual distinction and so maybe the simplest way to think about this distinction is this way you can think about a class as a blueprint to a house you can't live in it but it sort of tells you how to build it and the object is well the house itself so i can take this blueprint and cookie cutter that down the street and get multiple instantiations of this object so think about the class as a definition of something and an object as an instantiation of it it's an actual thing that we now get to manipulate and i'll be using these terms throughout the next few weeks i just want to make sure that we understand the distinction between a class which is a definition and an object which is a thing that we've actually created that we can now act on now as i said a class combines and abstracts data and functions an object is an instantiation of that class and i've been hinting this throughout the whole semester is we've sort of seen objects in classes already there's that dot notation that's been lingering around i think i probably mentioned that a string at some point is sort of like a class a list is like a class so here's a really simple example of a class a string is a built-in class that's the data is the string itself quote-unquote aardvark the functionality is append i can append something to the end of a string an integer is a built-in class stores data the actual number and the addition operator is a function on that data so now you see what i mean when i say data and functionality we store information a string an integer a list and then we can operate on that we provide you the programmer functionality to operate on that data okay now i don't think it'll surprise you to learn that we can define our own classes it's not just whatever python gives us and that's all we can do we can define our own classes our own data our own functionality and then build up really nice functionality from that and that's what we're going to spend of course the majority of our time doing is talking about how we define our own classes all right so let me start off by saying i'm going to define a class for you and it's going to unfold over a series of of lectures um and the class is of type ball right there you see that so this and i and i'm going to sort of do a bit of a slight of hand here i'm not going to show you the details of the of the class or the object just yet i'm going to tell you that we have this object this class called a ball class and what it allows you to do is store some data which is the position and the speed of the ball and the functionality is you can move the ball you can render the ball et cetera et cetera okay and again i'm not going to show you the code for a little bit because i want to again start sort of conceptually and then we'll dive into the details of how all this works so the the class that we define called ball has a constructor this line of code is calling the constructor to do what to instantiate an object so there it is i have a ball class and i want to build a ball the way i do that is i call this constructor the constructor is just the name of the class and then some information about what i want my object to be in this case it's the xy position of the ball and the xy velocity of the ball and we'll talk some more about what we're going to do with all those things and then of course my ball is now an object of type class ball so this looks pretty similar to everything we've seen before it's a function call in this case it happens to be a constructor which i'm going to describe in more detail in a second to a class of type ball it's going to return something back and that now is going to be an object now this constructor is really really special and very important and we're spending a little time talking about it before i actually show you the code for how to build this um class so what the constructor does number one is that remember this class is just this concept it's just a blueprint i don't physically have anything yet i don't have an actual object so the first thing it's going to do is it's going to create in memory a ball object so it reaches into memory it allocates some memory that says okay we're going to store some information in here some data with along with some functionality and it does that for you good not number one so actually create the ball number two it's going to initialize the data based on what you passed it so now what it says is okay i can have multiple balls the same way i can have multiple houses i'm going to build an object i'm going to allocate memory for it and i'm going to store the data that the user wants x y position v x v y velocity in the x and the y direction good initialization and it returns to you this is really important the address of the ball object that was uh allocated in memory and initialized for you okay now this sounds should sound pretty familiar to you because this sounds a lot like a list with a list what do we do we say square bracket score bracket slightly different syntax for calling its constructor a bunch of data in the list comma delimited elements what does python do it reaches into memory allocates some space sticks the data in there allocation and initialization and what does it hand you back the address of a list not the actual list but the address to the list which you can of course then reference the contents of the list so in fact and i think i even hinted at this lists are a built-in object and they do all three of these things good so this is sort of the picture you can have in your head and we've seen a picture like this when we did lists so i'm i have a class called ball again you have no idea how i've done this and we're going to get there so just abstract out the details of this for a minute and you know because i tell you that you can generate you can build a ball it has four pieces of information you need to specify where is it on a drawing canvas uh how fast is it moving in the horizontal and vertical direction and so when you call this constructor it does what it allocates some memory that's this box it initializes the variables which are i'm going to tell you are called x y v x v y which we'll see in a few minutes to the values you passed in 10 15 0 negative five and it hands you back an address to the object so this again is just some random number just some it's just a a pointer to where it is so i have an object in memory i've instantiated an uh something of type ball a class of type and now i have two things at my disposal i have the data which i've just initialized and i have all the functionality that comes with this class which i haven't shown you yet but i will in a minute now if i define another ball here's ball two with a different xy position 12 and 23 and a different velocity two and three um then what happens is well that's a call to the constructor the constructor allocates memory it initializes four variables and it hands you back an address and now i have two objects completely separate from each other right this is a call to constructor please build a ball object this is a call to constructor create another one and i can do this all day long and each one of these stores its own data each one has access to functionality to do what we want to this ball object good so uh and again i haven't shown you how the constructor worked i haven't turned how to define a class i haven't shown you anything yet but i want to sort of abstract that out for a minute and get through this concept and then we're going to dive into the details of that in the next segment okay just let me make a few points before we we finish up here so when i define an object ball one i can access the various elements of the data that i initialize remember it's x y v x v y using that little dot notation right there so ball one of course is the name of the object and i can reach in to that object and i can access the data and the functionality of course using that dot notation so you remember a while back we introduced that dot notation and i sort of waved my hands vigorously to tell you this is some syntactic thing having to do with object-oriented programming don't worry about it we'll get to it we're getting to it this dot notation is part of accessing either data or functionality associated with an object so you give the object name dot and then the data type and of course you can see why this is if i can create multiple objects it's not x per se it's this ball's x or this ball's y or v x or v y so i have to say which object do you want and then which data element of that same thing with a house if i have five houses that are the same i can't say go deliver this package to ball or house i have to say this house this address and then you go into that particular house and get what you want out of it good and um i can also access functions associated with objects and again i haven't shown you how to do this yet but i just want to introduce the notation so here what i'm doing is i'm initializing a ball at position 5 4 with velocity 3 and 6 and i can print the x coordinate by just saying ball 1 that's of course the name of the variable dot x and when i print this out it will print for me five because that is the x position here now remember that classes bundle up data and functionality things that you can actually do what functionality well whatever i want so for a list i can add things remove things append things sort things that's the functionality that's been given to me for this ball class well we're going to see in a little bit but it's whatever i want to do for the ball class that's my job as the constructor of this class that give you certain amounts of functionality i will tell you that one of the functionality is a function called update position it takes as input a time step and it moves the ball's position according to the velocity okay so let's just think about this for a second this is in some pixel coordinates and velocity is what how many pixels are you moving per second or per frame so with a time step of 0.1 um when i update the position of this ball its x-coordinate moves from position 5 to position 5 plus 1 10 of 3 because this is 3 pixels per second i've moved for half a one tenth of a second and so i've moved point three pixels and now it has a new position okay so notice here that the function associated with the object ball is operating on the data associated with the object uh ball okay so again this class bundles up data information about what you are storing and then gives you the ability to manipulate that data data through functions okay and there again is that dot notation i'm not calling the function update position that's not a function that's a function associated with a class of type ball i'm calling this balls update position and another ball it has a different update position why because it has to operate on its own data so every time you instantiate an object you get the data and the functionality associated with that object okay i know that was a lot there's a lot of sort of conceptual things going on here a lot of syntactical thing hold on we're going to do a couple more segments of this lecture and i'm going to start now to reveal how you build these classes and objects and show you where the data is where the functionality is and hopefully this will become more clear all right let's pick it up in a 