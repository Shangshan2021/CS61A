What are attributes anyway? Well, they're just  data that's stored within either an instance or   the class itself. And how do we access them? We  can use dot expressions, or there's a built-in   function that does the same thing. So going back  to our account example, I could create an account   by calling the account class. And I can access the  balance on that account with john.balance. There's   also a built-in function called getattr, that's  get attribute where you pass in an object and the   name of the attribute that you want to get, and  you'll get that balance back. And this works even   if we've deposited some money. We can also check  and see if an object has a particular attribute.   So we have a balance, but we don't have a 'lance',  for instance. So accessing an attribute, we can   use a dot expression, or we can use getattr. And  that allows us to look up an attribute using a   string. So we looked at that example. And we can  also check whether an object has an attribute.  getattr and dot expressions are exactly the  same thing. It's just a functional form of   a specialized syntax. They look up the name in  exactly the same way. And looking up an attribute   may return either an instance attribute or  an attribute of the class. But basically,   you're looking at the instance first if it's  there, and that's the attribute that you get.   Otherwise, you look in the class. Okay, so let's  talk about methods and functions. Well, a method   is an attribute. It's a function. So Python  distinguishes between two things, functions,   which have been around since the beginning of this  course, we know all about those and bound methods,   which couple together a function and the object  on which the method will be invoked. What does   that mean? Well, when I have an object, and  a function, and that object is going to be   passed it as the first argument to that function,  function as a method, then that's called a bound   method. So let's take a look. If I look up the  attribute deposit on the account class, all it is   is a function. And it's something that takes two  arguments. It takes the object that I'm depositing   into and then the amount that I want to deposit.  If instead, I look up deposit on an instance of   the account class, or tom_account as an account.  Then what I see is that this is a method, which   means it's taken the deposit function, and bound  it together with the tom_account, which will be   passed in as the first argument when we actually  call the function. Okay. So what happens? Well,   if we access the function directly from the  class, then we need to pass in two arguments.   Because remember how it was defined? It took two  arguments. One was called self and the other was   called amount. So if I take in tom_account that  I passed in 1001, now there's $1,011 in the   account. On the other hand, if I start out with  tom_account, and I look up the attribute deposit,   what I get back is a method. A method is different  than a function in the sense that the first   arguments already filled it with tom_account. So  tom_account is already the first argument, and all   we need to do is supply the second argument 1000.
So let's talk about looking up attributes by name.   We see a dot expression. In order to evaluate a  dot expression, we evaluate the expression to the   left of the dot, which yields the object of the  dot expression. That's where we're going to look   up the name. Then,  is matched against  the instance attributes of that object. If an   attribute with that name exists, its value is  returned. If not, then  is looked up in   the class, which yields a class attribute value.  That value is returned unless it's a function,   like withdraw or deposit, in which case  a bound method is returned instead. Well,   what's bound together? Well, the object of  the dot expression is bound together with   that function to create a bound method.
So there are attributes of an instance   and there are attributes of a class. So far, all  the attributes of the class we've seen have been   methods. But that's not the only option we have.  Class attributes are anything that's shared across   all instances of a class, because they're part  of the class, not part of the instance. Now what   happens when you look up that attribute by name on  an instance, and it's not on the instance, you'll   find it in the class. Okay, so let's extend our  example a little bit. Here's our account class. In   addition to defining the constructor, we're also  going to add a class attribute called interest,   the interest rate. This is something that will be  shared among all accounts. So all accounts have   the same interest rate. If I look up interest on  an account, I'll find 0.02 as the value. So here,   I create a new account. Tom is the holder. Jim  is the holder of a second account. And what's the   interest rate for tom_account? It's 0.02. And what  about for Jim? Same thing. Because they both are   instances of this class, neither of them has its  own interest. But the class has an interest rate.   And that's what we're looking up in these two  cases. So it was important to note that interest   is not copied into each instance. Instead, it's  always kept in the class. And that's important,   because if it changes in the class, well, that  change will be reflected in all of the instances 