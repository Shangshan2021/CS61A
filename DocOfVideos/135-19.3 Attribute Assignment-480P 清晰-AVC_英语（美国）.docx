Attribute assignment statements change  the values that are bound to attribute   names within an object or a class. So, you can  assign to attributes. Assignment statements for   the dot expression on their left-hand side are  attribute assignment statements. So they affect   the attributes of the object of that dot  expression. If that object is an instance,   then assignment sets an instance attribute. If  the object is a class, assignment sets a class   attribute. So let's say I have the account class.  Here, I've just shown you part of it. Interest   in this definition is already a class attribute  because it's defined directly within the class.   Or as holder and balance are instance attributes,  because they're set on the new instance that's   created and passed through init. So account is  a class and tom_account is an instance of the   class. If I say tom_account.interest = 0.08,  that's setting an instance attribute, because   the object of the dot expression is an instance.  So this expression evaluates to an object. This   whole thing doesn't look up interest on that  object and go find it in the class. Instead,   we just directly assigned to the attribute of  the object that's here. So this is attribute   assignment that adds or modifies the attribute  named interest to the tom_account. In this case,   the instance didn't have an interest attribute  before. And so the assignment statement will add   one. That's an example of instance attribute  assignment. Class attribute assignment arises   when you have an attribute assignment statement,  meaning there is some expression with the dot on   the left, and the object of that expression is  a class. So this will go and change the interest   attribute of the account class, which in this case  already existed. And so we go change it. Okay,   so here's an extended example of how attribute  assignment statements affect classes and objects.   Let's say I say, jim_account is an account with  Jim. And then I'm going to introduce this new   object, which has a balance and a holder. And this  instance is an instance of this class. Now, the   account class has interest. And that's accessible  from all the instances but it's part of the class.   And also has withdraw and deposit methods,  and in an init. So here, we see the instance   attributes of a jim_account, or just the balance  and the holder. And if I create tom_account, well,   then it will have its own balance and its own  holder. The balances happened to be the same,   or they could change later on. Here,  we've looked up interest on tom_account,   which means looking in tom_account to see if  there's an interest attribute. There's not.   So then you look at the class. There, it's found  0.02. And so that's the value we see. jim_account   has an interest of 0.02 as well. Next, I can  set account.interest to 0.04. That changes a   class attribute for the account class. So we  can see that change reflected up here. That   interest is not bound to 0.02 anymore, but  the attribute value is now 0.04. If I look   up the interest on Tom's account, I'll find that  0.04. And on Jim's account, I'll find the same,   even though these were created back when the  account class had a different interest rate.   So it's not the case that an instance has its  class attributes locked in when it's created.   Instead, they can change over time. And the  instances will reflect those changes. Next,   we see jim_account.interest set to 0.08. This  is an instance attribute assignment that adds   an interest attribute to the jim_account. Okay,  so now we see interest reflected in two places,   both in an instance and in the class. If we look  up jim_account's interest, we'll see 0.08, which   is what we just set. If we look up tom_account's  interest, we first look in tom_account,   it has no interest. And so we look at its class,  and it's currently set to 0.04. So now we see that   we're able to specialize a particular instance of the account class, giving it its own special   interest rate, which you know might happen  in a bank, somebody gets a higher interest   rate than somebody else. Let's say now we change  account.interest to 0.05. Well, that's a class   attribute assignment statement that will change  this to 0.05. Finally, we can check the interest   rate for each instance. Tom's account has an  interest rate of 0.05, which just changed because   of this class attribute assignment statement.  Jim still has an interest rate. That's a special   case 0.08. So by assigning to the class, you don't  erase all the special cases, they're still there.
