so let's do the last drill i would like you to create a class called kangaroo and it has of course it has a constructor and the constructor initializes an instance variable called a pouch contents to be an empty list so now the data associated with the kangaroo is going to be a list and initially initially it's just an empty list okay that's it now you're going to create a function called put in pouch and then you're going to create a print function so put in pouch takes a string as input and adds it to the kangaroos pouch which of course is the list okay if the object if that string is not already in there so if the string is already in there then go then print object already and pouch and don't do anything so if i add something into the pouch like a bowling ball and then i try to add a bowling ball again you shouldn't put two bowling balls in only one at a time okay and but if it's not then you should add it to the pouch and it doesn't matter where in the list it is the print function should print the kangaroos pouch contains and then print out everything that is in the list okay good again as always write a little driver so create a pouch print its contents add something print its contents add something in make sure it got added print it print its contents try to add something twice make sure you get the message saying there's there this is already in here all right take some time again full blown class uh constructor put in pouch and a print function and the data associated with this particular object is going to be a list that we'll be adding to using the put in pouch and when you come back i'm going to show you my solution okay here's my solution again i'm going to separate out the class from the driver so let's do the class first all right i have class kangaroo i have my constructor my put in pouch and my print function so the constructor is trivial in fact it doesn't take any input it's just self why well i said the initialization is an empty string so south dot pouch contents equals open brackets close bracket done nothing to do constructor takes no input fine perfectly fine put in pouch it takes a single parameters input x and what you have to do now is add it to the pouch if it's not already in the pouch so now you got to do a little bit of work so i've got to go through the pouch and check to see if that element is in there all right let's go ahead and do that for i and range the length of self dot pouch dot underscore contents so self is the object and i'm going to grab the pouch contents which is the list and i will take on every index from zero to the length of the list minus one and i'm simply going to ask that if self dot pouch contents sub i is equal to x that's what i'm trying to insert into the list then print already and pouch and what do i do now i'm done go home return return out of the function there is nothing to do here right there's nothing to add to the list you don't have to check any more elements you found it and you're done so for every element in the list check to see if the object exists if it exists print a message and boot out and if i get to this point in the code after the whole for loop is executed what do i know object's not in the list right obviously not otherwise i would have hit this statement i would have printed this and i would have returned so at this point i can simply append the object to the list so let's follow the south what is that address of the object pouch contents what is that the list associated with this object and that is a list so i can call the append function with the element that i want so look at the three levels of indirection object data associated with the object member function of that list okay right there good let's look at the print statement this is pretty easy if the if the length of self.pouch content that is the list is zero then just say the kangaroos pouch is empty there's nothing in there otherwise say that the kangaroos pouch contains and then i'm going to take the list and just convert it into a string which you can do of course or you could have put that into a for loop and printed them out and then that will print the contents of the uh list of the of the pouch which of course is just a list here all right let's go ahead and look at the driver now so i'm going to create a kangaroo object call that capital k and i'm going to go ahead and print it let's just make sure that the first thing works and it'll say the kangaroo's pouch is empty good that tells me that the constructor work and i have an empty list let's add something to the pouch k dot put in pouch a ball there's a string and then print k the kangaroos pouch contains and then it shows me a single object let's put something else in there make sure i can get multiple things in there good so that now has tells me that when i put the hammer in i print k i get a ball in the hammer and one more test let's make sure that it can deal with uh multiple objects trying to be put in so if i try to put a ball in it will say uh already in pouch and i'm going to just print that and make sure i didn't screw anything up so you have to be careful here maybe i got the message right but i still added it so when i print it it should only say ball hammer and really probably what i should do here because this is testing if the first object in the pouch is an object i probably should have also tested hammer to make sure somehow make sure i'm iterating through that whole list so you probably want to drive this a little bit more with a few more test cases to make sure you can find an object regardless of where it is in the list um and but again just you know basic functionality testing make sure your functions do what you think they do because one of the hard things with well really any code but particularly these member functions is you got to drive them you got to run them and you got to test all of them even if you don't know that you're you know when or how they're going to be used so that that testing code we'll see more and more of in the coming weeks to make sure we know how to verify that our code is doing what we think all right that's it for now and when we come back we're going to have you know a little bit more talk about objects and classes and start refining some of our thinking about these things 