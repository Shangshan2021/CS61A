A linked list instance is an object, and  all instances of a user-defined class can be   changed or mutated. Let's take a look at what  happens when you start changing the attributes   of a link instance. Linked lists can change. Using  attribute assignment statements, you can change   the first and rest attributes of a link instance.  In fact, an interesting consequence of this is   that the rest of the linked list can contain the  linked list as a sub list. So let's say I start   with a linked list with three elements 1, 2, and  3. Here's a sketch of what this might look like.   The actual environment diagram is more  complicated. But here's the essence of a linked   list is that it's just two attributes, the first  and the rest, where the first is in this case,   a number, and the rest is another link instance.  So here's the second one. If I assign s.first = 5,   what I'm left with is 5, 2, 3. But it gets really  interesting when you come up with another name   for s.rest, like t. So that's the linked  list 2, 3. And then we reassign the rest   attribute of a link instance. In this case, we're  assigning it to s, then s.first is 5. And what's   s.rest.rest.rest.rest.rest.first? Well think about  it for a minute and see if you can figure it out.   This is going to be the number 2. One reasonable  reaction is, how did we have so .rest when we had   a linked list that was only three elements long?  Well, back when we created it, it had only three   elements, but now it has a different structure  because we changed t.rest, and t was part of   s. What we've created is the following structure.  We changed s.first to 5. We never changed s.rest.   We did give a name to it, t, and we changed  t.rest to refer to s. So when you evaluate   