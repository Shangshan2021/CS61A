Let's apply this idea of modular design to  an example, restaurants search. Here are the   data. And we'll try to build a program that lets  us look up a restaurant by words in its name,   and also show related restaurants.  For each restaurant, we know its name,   the number of stars that got on Yelp, and the  price category that Yelp gives it. And these are   actual examples from the Yelp database that were  released a few years ago for academic use. Here's   another entry about La Cascada Taqueria, which has  3 stars on average, and a price category of 2. I   think in Yelp stars go from 1 to 5, and prices go  from 1 to 3. Each business not only has a name,   but also some complicated, unique string called  the business_id. And we'll have a different one   of these dictionaries for every restaurant near  the border of Berkeley campus. And we also have   reviews, which give a business_id telling us  which restaurant the review is about, a user_id,   which is a unique indicator of who wrote it. This  doesn't have an email address or anything. But   it does tell us whether the same user wrote two  different reviews, how many stars they gave the   restaurant, and some text. "Cafe 3 (or Cafe Tre,  as I like to say) used to be the bomb diggity when   I first lived in the dorms but sadly, quality  has dramatically decreased over the years....",   says user xVocUsz et cetera. This review is from  2012. The data I have is a little bit old because   Yelp stopped publishing an academic data set that  includes Berkeley restaurants. Their new academic   data set doesn't have anything from Berkeley.  So we're going to use some older data because   it's more interesting to see cafes and restaurants  that actually exist around campus. Here's a review   for a different business. This business_id  matches the one for La Cascada Taqueria. And   user 84d et cetera gave two stars to La Cascada  Taqueria saying, "Excuse me for being a snob but   if I wanted to room temperature burrito, I would  take one home, stick it in the fridge for a day,   throw it in the microwave for 45 seconds, then  eat it. NOT go to a restaurant and pay like   seven dollars for one..." said this user in 2009.
So given that I have a file full of these business   names, and a file full of these reviews, how  can I build a restaurant search application   that lets me look up a restaurant by name and  show related restaurants? Well, there are many   questions to be answered in order to finish this  application. What does it mean to look something   up by name? What does it mean for restaurants  to be related? What should we do with the price,   and the stars, and the business id? How should  we represent businesses and reviews? Well,   let's dive in and try to focus on modular design.
So here's my file for restaurants. And in fact,   there's more information than even what I said.  Longitude, latitude categories, addresses,   not just for Cafe 3, but also Jasmine Thai, Fondue  Fred, and a long list of other ones. There are 133   restaurants in this dataset. And what about the  reviews? We have 17,000 reviews that say things   like, "The pizza is terrible, but if you need a  place to watch a game or just down some pitchers,   this place works." And we have the business idea  they're talking about. But we don't know the name   of that unless we match it up with one of the  businesses in the other file. Having taken a peek   at the data, I think we can dive in and write some  code. We need a function that searches so that we   can call search on Thai and get back a list of all  the Thai restaurants. And then for each restaurant   in this results, we should be able to look at the  restaurant itself and also what it's similar to. I   think a good way to represent whether something  similar is using a method. Let's get three   different similar restaurants for every r. Now for  this to work, we need to have a search function.  We pass in a query and we need to decide what  it means to match a query. Well, I think if the   query is in the name, then we should return that  restaurant. r for r in all_restaurants if query   in r.name. Now, we haven't defined yet what a  restaurant is, or how to get all the restaurants.   So this code might not work, but it has the  right idea. One of the most important concerns   of a search engine is always the ranking that it  gives to the results. So what orders we return the   restaurants in? Alphabetical, by location, maybe  the most popular one first, maybe the one with   the highest star rating? This decision gives us an  opportunity for modular design. We can just pass   in a ranking function and return a sorted version  of the results that uses the ranking function in   order to pick which ones come first. So that nice  piece of modular design comes with a consequence.   Every time I call a search, I need to come up  with a ranking function. So it would be helpful   to have some default, how about by default, we  order them by their number of stars? Now sorted,   gives you back the list of results, from least to  greatest according to the key function. So this   would give us the one with the lowest stars  first. Unless we put in negation sign here,   in which case, the lowest by negative stars  is actually the one with the most stars. Okay,   we're making progress. But we need to know what  all the restaurants are, and how a restaurant   works. Let's start with the latter. Representing  a restaurant is naturally done with the class.   And we already see some of the attributes  we need to track, the name and the stars,   which we'll assume we get from the file somehow  and are passed in here. I think this is a good   opportunity to think about how we're going to  keep track of all the restaurants. Instead of   having some global name, we could use a class  attribute, which we initialize here and populate   here. all.append(self) puts whatever restaurant  I create into the list of all restaurants. So   now I think my search function will work. But  what about r.similar? That's something we need   to define as well. How do I find the k most  similar restaurants to some restaurant? Well,   that sounds complicated. I think a good step in  the right direction is to write down a doc string,   "Return the K most similar restaurants to SELF.".  And for now, let's leave it blank. I think we've   written enough code that we should test our  progress. So let's not worry about the file   just yet and create some restaurants. Thai Delight  has 2 stars. Thai Basil has 3 stars and Top Dog   has 5 stars. Man, that place is delicious. And  we run our program. We found a bug. Instead of   referring to all restaurants. I was referring to  the built-in all function which does not have an   append method. Another bug is that when I print  out a restaurant, I see some nonsense. I can fix   that by just adding a __repr__ method. And then  why don't we return angled brackets around the   name of the restaurant? Okay, so when we search  for Thai, we find Thai Delight and Thai Basil,   but not Top Dog. That looks good. And we just  need to finish this notion of similarity.
