We need to implement the similar method of the  restaurant class, which takes in a restaurant,   and a number of similar restaurants to return and  finds the most similar k. There are many notions   of similarity, they're close in distance, they  have a similar reading a similar price. Maybe   they're similar because the same people review  them, meaning the same people go there. Whatever   the case is, I think we have another opportunity  to introduce modularity by passing in a similarity   function that takes in two restaurants  and tells us how similar they are. Now,   the job of the similar function, its concern is  not to determine the similarity, but determine   the k most similar restaurants to self. Why  don't you try doing that? Implement similar,   a Restaurant method that takes a positive integer  k and a function similarity that takes two   restaurants as arguments and returns a number.  Higher similarity values indicate more similar   restaurants. And the similar method is supposed  to return a list containing the k most similar   restaurants according to the similarity function,  but this list should not contain the restaurant   itself. It would be silly to say that the most  similar restaurant to Thai Delight is Thai   Delight. So we'll define the similar method, which  returns the K most similar restaurants to SELF,   using similarity for comparison. And what we'll do  is build a list of all the restaurants except for   self, and then sort it according to some key  function. And then there's an opportunity to   manipulate the sorted list. Sorted is a built-in  function that takes some iterable, and some key   function and returns a new list containing all  items from the iterable in ascending order,   according to the custom key function. And you can  use a reverse flag, but we didn't use that in our   example. Why don't you spend a minute and try  to fill in this implementation? Pause the video,   and I'll go through the answer in 3, 2, 1.
Others is a copy of the list of all restaurants   and we need to remove this restaurant which we  do using the remove method. And what do we pass   in to tell it what to remove? Self. That's the  element of the list of all restaurants that we   do not want to include in the list of similar  restaurants. The key function for sorted,   just like the key function for max and min, must  be a one-argument function referring to an element   of the others list. So how do we make sure that  others is ranked according to its similarity to   self? Well, we write down a function of one  argument that computes the similarity between   self and r. I've negated it so that most similar  restaurants come first and the least similar   restaurants come at the end. Now that we've  sorted them all, we don't want to return the   list of all of their restaurants, but instead,  just the top k, which we can do with a slice.
