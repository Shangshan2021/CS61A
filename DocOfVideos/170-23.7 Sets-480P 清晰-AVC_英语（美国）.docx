sets are built into Python most anything that's sufficiently generic and applicable to many different situations is built into Python so if you find yourself implementing a function that computes the size of the intersection of two sets well probably that's built in sets in Python are just another container type like a dictionary or a list or a tuple set literals are enclosed in braces but a set can't contain two of any element no element of a set can be equal to another element of a set also sets are not ordered Python gives them some order when it displays them or when you iterate through the elements but you don't really have any control over that order instead you put elements in a set and then when you iterate through that set you get any old order that Python decides so if I build a set one two three four and four and I look at what's in that set there will only be four unique elements rather than the five elements I tried to put in there and they'll come in some arbitrary order the main use of a set is to check whether some element is in the set and this is a constant time operation checking whether some element is in a list is a linear time operation in the length of the list but checking whether something's in a set is constant time regardless of how many elements are in the set you can figure out how many elements there are using a Len and you can take the union of two sets or the intersection of two sets so to figure out how many elements two sets have in common you could take the Len of the intersection of one set and another set Union and intersection do not change the set there are other methods for updating the set but union and intersection create new sets and leave the old sets alone so s has not been mutated anywhere here if you want to learn about setting tation you can read about it in the 