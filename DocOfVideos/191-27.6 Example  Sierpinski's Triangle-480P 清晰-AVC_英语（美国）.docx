Let's look at an example of a Scheme program that  draws Sierpinski's triangle using lots of the   features of Scheme that we've seen so far. When  you start Scheme, you can immediately start adding   numbers together. But there's also some built-in  drawing facilities in the version of Scheme that   we distribute with the homework assignments for  this course. So for example, you can say, move   forward 100. And this forward procedure tells a  little turtle to walk forward to 100 units. Let's   rearrange a bit so that we can move the turtle  some more. Other commands include turning right   by 90 degrees, going forward again, or in fact,  you could also go backward, and the turtle can   not only turn right but also turn left. Now all of  this interacts with the Scheme language that we've   already defined. So I could build a procedure  to draw a line that moves forward 50. And then   I can draw a line and another line and take a  right turn, I could also define a procedure that   does something twice by doing it once and doing it  again. So if I twice draw a line, and it will draw   two lines, and all of this could also be stored in  a file. Now typically, what you store in the file   are the procedure definitions. So there's what a  line is, there's what twice is, perhaps not just   twice, we'd want to repeat something many times.  Repeat k times some procedure means calling that   procedure, we're going to do it at least once.  And if it's the case that k is greater than one,   then we have to keep going. So we'll repeat k  minus one times, using that same procedure. I   could load all those by naming the file. And I'll  take a right turn to point ourselves down. And we   can repeat three times drawing a line or twice  more, we could draw a line. Or we could repeat 5   times some custom procedure that we define using  a lambda expression. Repeat takes a procedure   of zero arguments. So I say lambda takes zero  arguments. And each time it's called, I'd like to   go forward 50 And then take a right turn of 144  degrees. Cool. Let's quit and start over so we   get a fresh canvas. Now that I can repeat, I can  draw, for example, a triangle. But I don't want   a triangle, that's just a boring old triangle  that always has a line as its edge. I want an   arbitrary edge. So I'll use a function to define  what it means to draw the edge of the triangle.   But the triangle always involves repeating three  times a procedure that first draws the edge,   and then takes a turn of 120 degrees. So if I load  this file, and draw a triangle with lines as the   edge, I'll get a regular triangle. But I'd like to  draw Sierpinski's triangle. Let me tell you about   Sierpinski's triangle. Sierpinski's triangle  has some recursive depth d, and also some side   length k. It's a triangle. But drawing the edge of  this triangle involves making a choice. If d is 1,   then we just draw a line of length k. Otherwise,  we draw a leg of Sierpinski's is triangle with d   greater than one, which is going to be mutually  recursive with this procedure Sierpinski that   I've just defined. The leg also takes in d and k,  but it does the drawing work. And here's what it   looks like. You draw Sierpinski's triangle, but  half the size and with a depth of one less. Then,   without drawing a line, you move to the end of  where this leg should go. Which means you have   to pick your pen up, go forward k, and then put  your pen back down so you can draw some more of   Sierpinski's triangle. So I'll quit so I can start  fresh. Start with a 90 degree right turn, set the   speed of the turtle to zero, which is as fast as  it goes. And then I can draw her pin skis triangle   of depth 5 with side length 200, which will work  much better if I actually load the file defining   what it is and then it will start to draw.
So each little triangle you see is the base   case. If d equals 1, then it just draws a triangle  using a line. Otherwise, it builds a triangle   out of Sierpinski's triangles. A Sierpinski's  triangle is made up of three Sierpinski triangles,   each of which is made up of three Sierpinski  triangles, each of which is made up of three   Sierpinski triangles, each of which is made up  of three regular triangles. We finally hit the   base case. And of course, if I went back 200,  then I can draw an even bigger one. But it's   going to take a while. You're welcome to skip to  the next video if you don't want to watch it draw,   but some people like watching it draw  and so you're welcome to do that as well.
Yes, right now, it's redrawing or  Sierpinski's triangle where I drew   it before. The turtle doesn't keep track of  what it's drawn before. And so it doesn't   know that it's doing redundant work. But  now finally, it's completing the job.
You'll notice after it finishes  drawing the last little triangle,   it's going to work its way back to where it  started by completing all the pin up forward   pin downs of all the different recursive  calls along the way to creating this image.
