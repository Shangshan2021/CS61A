Python has many types of built-in data  structures, lists, tuples, dictionaries, sets,   and more. Scheme has lists. And lists in Scheme  are like the linked list class that we created in   Python. Every Scheme list is a linked list. List  was created in the late 1950s. And back then, it   seems computer scientists really liked confusing  names and acronyms. So they invented a procedure   called cons, which is a two-argument procedure  that creates a linked list. Creating a linked list   is only useful if you can access the first element  and the rest of the list. And there are procedures   for that as well. Car is the procedure that  returns the first element of a list in Scheme. And   cdr is the procedure that returns the rest of the  list. There's also a built-in symbol nil, which   evaluates to the empty list. So to create a linked  list of length one containing the value 2, you   would write cons 2 nil, which would build a cons  with 2 and the rest of it being nil. Oftentimes,   that's drawn in this way, where the slash just  means that the rest of this list is empty. Now   Scheme lists are displayed as parentheses with  elements separated by spaces. There is this   underlying linked list structure, but the standard  way of displaying a linked list doesn't show that   structure. Instead, it just shows the elements.  So if I cons 2 nil, I build this cons. And if I   cons 1 in cons 2 nil, then I build this cons, or  the rest of the list is a list containing 2. But   evaluating this expression in Scheme doesn't show  me this structure. Instead, it just shows a list   containing 1 and 2. If I define x to be a list  containing 1 and 2, I can look at x and see the   whole list. The car of x is the number 1, the cdr  of x is the list containing 2. If I cons 1, cons   2, cons 3, cons 4 nil, I'm building a structure  that looks like this. But displaying it in Scheme   looks like a list containing 1 2 3 and four. So  all Scheme lists have a linked list structure.   You access their elements using car and cdr, but  you display them as a list of elements. Let's take   a look at some more demos. Here, I'm going to load  a web-based interpreter that we use for the course   because it will draw the linked list structure of  any list that I create. So if I define s as cons   1 cons 2 nil, s is a list is displayed like this.  But if I draw it, I'll see the link structure. And   draw is not built into every version of Scheme.  But it is built into this one so that we can see   what's going on. What happens if I've cons 3 on  2 s? I'm allowed to do this. When I call cons,   the first argument can be anything. The second  argument either needs to be another cons or nil.   Cons 3 s is list 3 1 2 and cons 4 on the  cons 3 onto s gives me the list 4 3 1 2,   which if I draw it shows me that it has a linked  list structure. So what if instead, I cons 4 cons   3 nil onto s? Think about what this is going to  display. I suggest you pause for a moment until   you have some idea of the answer. I'm going to  show you the answer in 3, 2, 1. Cons creates a   list where this is the first element and this  is the rest of the list. Since s has length 2,   this cons has length 3. And the three elements are  a list containing 4 3, and then the number 1, and   then the number 2. If I draw that structure, it  will show me that it is a one, two, three-element   list with a list as its first element and then a  number as its second and a number as its third.  If I build this structure and I look for its  car, I will get the list 4 3, and it has a car,   the number 4. Hopefully, you're getting the hang  of it. Let's try an even trickier one. Remember   that s is a list 1 2. What happens if I cons s  cons s nila? Think about it for a second, maybe   pause the video. And I'll show you in 3, 2, 1.
It's a list containing the list 1 2, and the list   1 2, as elements. Drawing this one shows that  they're in fact the same element twice. A list   containing the list 1 2 and the list 1 2. Let's  look at a few built-in functions related to lists.   So if s is 1 2, I can see whether that's a list or  not. It is. And remember that #t is Scheme's way   of saying true. Is 3 a list? No. Is that car of s  a list? No. Because the car of s is the number 1.   Is nil a list? Yes, it's the empty list. How can  I tell the difference between the empty list and   a non-empty list? I could use them no question  mark predicate. And I can also build lists with   the list procedure. List 1 2 3 4 builds a list  with contents 1 2 3 4. Now it's still a linked   list structure underneath. I can, for example,  get the cdr of the list 1 2 3 4 and that will   show me the list 2 3 4. If I had this cdr and  I cons 0 onto the front, then I'd have 0 2 3 4.
