in the very beginning of this course I said that call expressions are the only kinds of expressions we need well it turns out that they're not you also need control control statements include if statements and while statements that effectively describe what should happen next in the course of the program so let's take another look at control statements this time not just learning how they work but asking why they're there in the first place and you've seen this problem before let's try to write a function that does the same thing as an if statement and in particular we'll focus on this form of a conditional statement where there's one if Clause and an else clause and Noel if clauses although that wouldn't change the story very much the execution rule for conditional statements in general is that you consider each Clause in order evaluate the headers expression if it's present this has one this doesn't and then if it's a true value of the value of that headers expression or you're an an else editor then you execute the suite and skip the remaining clauses what are all these clauses and Suites anyway there's the if clause there's the else clause statement and this is just one big statement can consist of multiple clauses in Python there's that header expression slot and the suite is everything indented after the if line and ends when you get to an unintended line next so here's the if suite here's the else suite and the point of this execution rule is that you either execute this suite or this suite if you do this one then you skip the rest if you don't do this one then you move to else and you always execute the else suite if you get there so this statement let's try to write a function that does the same thing as an if statement is provoking to ask the question why do we have this in the Python programming language at all how come we can't just have a function that takes some kind of header some kind of sweet expression and another sweet expression and if this is true then it does this otherwise it does that now this function doesn't exist in Python but we could imagine implementing it in a pretty straightforward way you just pass in the predicate consequent alternative and you use an if statement in order to do the work wouldn't it be nicer if everything in Python was a call expression and so it looked like this instead of looking like that I mean here you have to remember how to indent and you have to remember the colons and everything here is just a little bit simpler it even fits nicely all on one line but the reason we don't have this function that doesn't exist is because of the evaluation rule for call expressions which says that before you call this function you evaluate this expression to figure out what function you'll call and all of these upper end expressions to figure out what arguments you'll call it on only then do you apply the function that is the value of the operator to the arguments that are the values of the operands so figure out what you're gonna call and what you're gonna call it on and then execute the body of the function but that can lead to problems because in this syntax only one of these two is ever executed in this syntax they're both evaluated does that really matter well let's look at a practical example of when it would M PI thon the square root function that's built in doesn't really like negative numbers if you give it a negative number then it tells you math domain error now if you take enough math you'll find that mathematicians have defined a result for this they say even though you can't take the square root of a negative number and have a real number dancer you can invent imaginary numbers that give you negative numbers when you square them and after learning this fact about mathematics you might want to define a real square root function which just returns the real part of the square root of x and acknowledges that the imaginary part is there but we are not going to compute what it is so we might write it as if X is greater than zero return the square root of x otherwise return zero because the real part of the square root of negative four is just zero and the imaginary part is two x I will also import square root and load the file and then we can find the real part of the square root of four is two and the real part of square root of negative four is zero that all works fine but it might surprise us that this works fine because when you pass in negative four somewhere in the body of this function it says we're gonna take the square root of negative four and this function errors when it gets a negative number the only thing that stops the error is this control statement which chooses to only execute out of this line or this line but never both if instead I had used my if function to try to compute this very same result it certainly would look nice to say if X is greater than zero tickets square root otherwise it's zero and what about returning well let's say that we can return this and we can return from here and that way we should be able to get the values that we want so running this version of the code we can compute the real valued part of the square root of four is two and the real valued part of the square root of negative 4 gives me a math domain error why I said if X is not greater than zero just use zero but because this is a call expression all three of these are evaluated before this is ever called and that includes square root of negative four which causes this to crash so without an if statement which is a control statement that gives us the choice of whether to evaluate some expression or not depending on the value of some other expression we can't choose between alternatives we have to only choose between values and that's not good enough to compute the real square root of x so that was the whole point of the question you did on your homework there's a reason why the Python programming language has a separate kind of statement for conditionals instead of just using yet another function and that's because functions always evaluate their components but control statements skip some parts or repeat some parts and that's just not something that call 