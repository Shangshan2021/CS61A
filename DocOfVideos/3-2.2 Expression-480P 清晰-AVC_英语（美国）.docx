okay on to course content. we're going to talk  about expressions. an expression describes a   computation and evaluates to a value. now  expressions are not something particular   to computer science. mathematicians have been  describing how to compose different numbers   together for a long time. they invented lots  of different ways of describing computations   using expressions. in order to add two numbers  together you express that by adding this plus   sign in between two numbers. division is  completely different, you put one number   over the other. in order to express a square  root you put a number in a little house to   take the sine of an angle you write sin not sine  sine takes too long to write just sin. and there   are all these other ways of expressing  how to combine together different values it turns out that one of these is a generalization  over all of the others and it's all we need and   that's function call notation f of x or f  of x comma y etc. so as computer scientists   instead of expressing computation using all  of these different forms with the subscripts   and superscripts and the vertical bars we'll  just write down everything using function call   notation. okay so here's my claim is that all  expressions can use function call notation and   for that I'll just fire up Python and show you.  I start Python by typing python3 which gives me   a very recent version of the programming language  interpreter. now an interpreter provides a prompt   where it waits for me to type an expression and  then displays its value. so the expression that I   type here 2000 plus 15 now includes two different  values combined together by addition and the   value that's displayed is what I get by adding  these two numbers together. and python is quite   a powerful calculator - I can multiply multiple  numbers together. I can even nest things with   parentheses I can divide there's special notation  for raising something to the third power if I want   to add stuff together at the end it's just going  to compute that for me very quickly. this is an   expression this is its value. okay what about call  expressions well call expressions have a special   form where you name a function that you want  to call in this case the max function and then   you write down expressions that give you the  values to which max will be applied. what's the   max of two and four it's four. what's the min of  negative two and fifty thousand five hundred fifty   thousand let's not get crazy. okay so negative  two so these are called call expressions when   you see some function and then some parentheses  and you see these other expressions separated by   commas that is a call expression. now I claimed  that everything could be expressed using a call   expression. that's including multiplication and  division and addition etc. so in addition to   the plus, which is used between two expressions  to add them together there's also a function   called add. now it's not available all the time  I have to write this import statement in order   to get access to add and mul that's only a minor  inconvenience I just do it once and now I can add   together two and three using a call expression I  can multiply together two and three in order to   get six. now call expressions are really wonderful  things for instance they can combine multiple   values together just by using lots of commas.  what's the max of one two three four and five   well that's five. they can also be nested within  one another I can multiply the result of adding   two to the result of multiplying four and six. okay  I've added two to what I get by multiplying four   and six but I said I was going to multiply that  by something well how about the result of adding   three and five and that gives me 208 now in call  expressions you don't need to memorize the order   of operations just the nesting structure of the  expression itself tells you exactly what gets   multiplied before it gets added so you have  to multiply 4 and 6 in order to add it to 2   life is not so simple when you use these infix  operators between different values because you   have to know that multiplication comes before addition  in order to understand how the expression gets   evaluated so we're very pro call expression in  this course we want to understand exactly how   it works. so first let's talk about the structure  or anatomy of a call expression. there are always   parentheses. the whole thing is a call expression  which has within it other expressions. everything   that comes before the opening parenthesis is  called the operator sub expression and by sub   expression I just mean it's an expression within  an expression. the operands are separated by commas   within parentheses operators and operands are also  expressions. now these are very simple expressions   the number two the number three and the name add  they evaluate two values the number two the number   three the function that adds two numbers together  the way in which call expressions are evaluated   is always the same. it's an evaluation procedure  now the way the programming languages work is   that they interpret your expressions by applying  evaluation procedures and they just apply those   same procedures over and over again, procedurally.  the one for call expressions goes like this you   evaluate the operator and then the operand sub  expressions in that order. then you get a function   from the operator and arguments from the operands  you apply the function that is the value of the   operator to the arguments that are the values  of the operands. so first you evaluate all the   sub expressions and then you apply a function  all that in order to add two and three together   well the reason why we go through this in such  detail is to observe that the same evaluation   procedure can be used many times over in order to  evaluate much more complicated nested expressions   so here's that nested call expression that we  tried before in the interpreter. now Python just   said 208 like magic and it evaluated the  whole thing. well how did it do it? it just   applied that evaluation procedure and said oh  this is the call expression. I see parentheses   therefore I must evaluate the operator: that's  the function that multiplies. I must evaluate the   first operand which is another call expression  and so it applies the same procedure again the   same procedure says I'm going to evaluate the  operator that's the add function I'm going to   evaluate the operand 2 - which is just the number  two then I'll evaluate mul (4, 6) which is another call expression   fortunately I have a procedure for evaluating  call expressions. it goes like this: I evaluate   the operator and operand sub expressions to  get the function that multiplies the number   four and the number six since I now have all of  the operands evaluated I can apply multiply to   four and six to get 24. this is the value of that  expression. now I've actually evaluated all of   the operands from this sub expression which  means I can apply the function add to 2 and   24 in order to get 26. so far I've evaluated one  operand I've evaluated the operator but I still   need to evaluate the last operand before I get to  multiply anything. that means I have to figure out   what add 3 5 is. that's another call expression  I find the operator and operands evaluate to   the add function 3 & 5 adding 3 & 5 gives me 8  multiplying 26 times 8 gives me 208. this diagram   is called an expression tree. it's an illustration  of everything that happens within the computer as   it evaluates this nested call expression. so the  important thing to observe here is that the order   in which the expression is evaluated provides the  right information at the right time. you have to   have figured out that this thing is equal to 26  before and this thing is equal to 8 before you   know what to multiply together in order to finish  the computation. it's also just an illustration of   the same process being applied over and over again  the procedure for evaluating call expressions  so this whole thing is an expression tree that's  called an operand sub expression this is the   value of that very sub expression so I just copied  this thing down here and then I went through the   procedure to compute its value 26. this is also  the first argument to mul an argument is always   a value and this value 26 is multiplied by 8 to  give me 208 the value of the whole expression 