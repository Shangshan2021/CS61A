Abstraction. Functional abstraction is  giving a name to some computational process,   and then referring to that process as a whole  without worrying about its implementation details.   So here's a function square. And here's another  function, sum_squares, that calls square and its   body. And the question is, what does sum_squares  really need to know about square in order to   use it correctly? So for each of these, try to  answer yourself, before I show you my opinion.   Does sum_squares need to know that square takes  exactly one argument? Yes, it does. Otherwise,   it can't call it. Does it need to know that square  has the intrinsic name square? No. An intrinsic   name is only there so that humans can inspect  the name of a function. Any function with any   intrinsic name, as long as it's bound to the name  square in the current environment, will suffice.   Do we need to know the behavior of square that it  computes the square of a number? Yes. In order to   use a functional abstraction effectively, you need  to know what it's supposed to do, its behavior.  Do we need to know that square computes  square by calling the mul function? No.   It can compute the square any way it wants  and we'll still have a correct implementation   of sum_squares, which relies on square.
So we could compute square like this, with the   built-in power function. Or I could invent some  strange way of computing squares, such as this.   If the name "square" were bound to a built-in  function, in fact, then sum_squares would still   work identically. It doesn't matter whether square  is user-defined or built-in for sum_squares to use   it. Now let's talk a little bit about choosing  names. Names are there to help people. The names   that you choose typically don't matter for the  correctness of a program. But they do matter a   lot for composition, or for how you write your  program in such a way that other humans can read   it. So here are some guidelines. Names should try  to convey the meaning or the purpose of a value   to which they are bound. So that it's easy to see  why we've created this value and what we're going   to do with it next. The type of the value bound  to the name, whether it's a number or a string,   is best documented in a function's docstring, as  opposed to the name that you bind to the value   itself. And function names, the names that we give  to our functions that we define, typically convey   either their effect, such as printing, their  behavior, such as tripling, or the value returned,   the absolute value of a number. All of these are  reasonable ways to name a function. So here are   just some suggestions. The stuff on the left,  not such a good idea. The stuff on the right   is preferred. Instead of calling some value,  true_false, just because it's either true or   false, try to say what it's supposed to represent,  such as the fact that a player rolled a one in the   game of Hog. Instead of just single letters, such  as d, in a context of a larger program, it's very   helpful to use a whole name, such as dice. When  you're naming a function, you can describe what   that function does what its behavior is, as  opposed to just who calls it. So when you're   defining play, we had a functional abstraction  for taking an individual turn. And instead of   calling it play_helper, or play some function,  just because it was called by play, we called   it take_turn, because that's what it does. It  simulates taking a turn. And then not just play,   but some other function could use it as well. We  don't want to name values just by their type. So   instead of my_int, to say that something's an  integer, we want to say what the purpose of   storing that integer is, and what it represents,  the number of roles, for instance. And finally,   there are some names that are just extremely  hard to read depending on your font, such as   the lowercase l, the capital I, the capital O can  be confused for numbers, 1 and 0. It's much more   typical if you're going to use just a single  letter, to use something else, like k, i, or   m. And then you have to wonder about which values  deserve a name at all. We don't have to give every   intermediate value in our program a name, because  we can have compound expressions. But if you have   the same repeated compound expression over and  over again, it's often better to give it a name.   That way, if you want to change it, it will change  everywhere. So if I write something like this,   or have computed the square root of a squared  plus b squared, both in a conditional statement,   and in the assignment statement in that suite,  it's probably better to give that thing a name,   and then use it twice, here and there. So that if  we need to change how we compute the hypotenuse   in some way, we can do that all in one place. So  don't repeat yourself. And also, don't make your   expressions too complex, so complex that it's hard  for a human to read them. Even though a computer   has no problem with this long line, it can take a  human quite some time to understand what's going   on. It might be better to pull out some meaningful  subpart of it, such as the discriminant of this   quadratic formula, and give that a name. So that  both, this equation and this equation, are easier   to read for a human and trying to understand this  whole nested thing. I have a couple more naming   tips. Names can be long, that's okay, especially  if they help you document what your code does.  So an assignment statement that takes the  average of the age of some students and   calls that the average age is a fine way to  explain what's going on, because it's kind of   clear what every piece of this is going to do.  And I think that's preferable to include in a   comment about what is going on, and then a more  cryptic expression. And finally, I think it's   okay if names are short, even single letters  if they're representing generic quantities,   such as you can take the absolute value of  any real number, or you're using just account   or an argument to a mathematical operation, or  you're wrapping some generic function. But there   are conventions that are worth learning because  programmers use them in many different programming   languages. Certain letters are used to represent  integers. Others often represent real numbers,   and others are used to represent functions. These  are all just practical guidelines. You don't have   to memorize them all. You don't even have to  obey them. Writing programs is a creative act.   If you want to do something else, that's fine,  as long as your program is understandable by   other people. So having conventions makes  everybody understand a little bit better.
