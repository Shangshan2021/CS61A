Mutual recursion occurs when two different  functions call each other. So now we're finally   going to implement the luhn algorithm, which  is actually used to compute the checksum of   credit card number. So here's the description  from Wikipedia. From the rightmost digit,   which is the check digit, moving left, double  the value of every second digit; if product of   this doubling operation is greater than 9, then  sum the digits of the products. Take the sum   of all the digits. So how does this work? Well,  let's compute the luhn sum of 1, 3, 8, 7, 4, 3.   We do that by taking each digit, except for every  other digit which I've grayed out, gets doubled.   Starting from the rightmost, 3 just becomes 3,  4 gets doubled to 8, 7 to 7, 8 gets doubled to   16. Since the result of the operation is greater  than 9, well then sum 1 and 6 to get 7, 3 is 3   and 1 is 2. So then 2 plus 3 plus 7 plus 7 plus  8 plus 3 is 30. And a valid credit card number   will always have a luhn sum, which is a multiple  of 10. So what's the point? Well, the nice thing   about the luhn sum is that if any one digit is  incorrect, then the luhn sum will be something   other than a multiple of 10. Moreover, almost  all transpositions, so say I switch the 4 and   the 7 will be detected by the luhn sum algorithm  and give a result that's not a multiple of 10.
So let's write a function that computes this.
The luhn sum of n. Well, it's  very similar to some digits.  If n is less than 10, then we just return n.
Otherwise, we get the last digit.  And we're going to return  something plus the last digit,   but that something will be not to  call the luhn sum, but instead,   I called the luhn_sum_double. And what the double  version will do, is it will double the last digit   and some of its digits if necessary before  adding that digit in, as we specified before.
Okay, so a luhn sum just takes the last digit if  there's only one, otherwise, it does its doubling.  So let's compute that double digit. So the  first thing we'll do is we'll break up n then   we'll compute the luhn digit, which is the  sum of the digits of 2 times the last. Now,   if n is less than 10, we just return the luhn  digit. Otherwise, we'll return the luhn sum   of all but the last digit plus the luhn digit  that we computed, that one that got doubled. So   notice that luhn_sum calls luhn_sum_double and  luhn_sum_double calls luhn_sum. This is mutual   recursion when two functions call each other. Now  base cases can appear in both those functions or   in only one. In this case, we see that it appears  in both. Okay. So the luhn sum of just the number   2 is 2. But if I look at 32, then the 3 gets  doubled to 6 plus 2 is 8. And if I take the luhn   sum of a valid credit card number, so here's  a valid MasterCard number. It doesn't work,   but it's within the range of numbers that  MasterCard uses. Then we'll get a luhn sum,   which is a multiple of 10, such as 20. So if you  want to try this out on your own credit card,   you can check to make sure that it's valid by  making sure that its luhn sum is a multiple of 10.   Or if that's too much work, you can just send your  credit card number to me, I'll check it for you.
