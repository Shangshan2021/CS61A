Let's let you try one. Now we want to write a function that computes an inverse cascade.
What's that? Well, if we pass in the number 1234, we want it to print out the following lines. 1, 12, 123, 1234, and then get smaller on the way down. Now, if you want, you can try to implement this from scratch. I'm going to give you some structure right now so that you can implement it in a particular way, using higher-order functions. First, here's the implementation we'll use, we'll call grow, to print the 1 the 12, and then 123, We'll call print n, in order to print the longest line of all. Then we'll call shrink. Now what are grow and shrink? Well, they're both going to be related to the following higher-order function, which takes in two functions f and g, and a number n. And if n, meaning f n is not 0, 0 is the only false value of a number.
So if n is not 0, then we'll call f and then we'll call g in that order. So here's the challenge to you. Define grow and shrink, which are both functions of a single argument we'll call n, that involve calling f and g on some arguments. So your goal now is to figure out what arguments we could pass in, in order to complete the implementation of inverse cascade. Pause the video and think about it. I'll show you the answer in three, two, one.
One way to implement inverse cascade is with a grow function that first grows and then prints. So why does grow grow and then print? Well, because we want to do the small stuff first, and then the big stuff. And we're calling it first on n, and then passing n divided by 10, passing n divided by 10 there, etc.
And so by growing first and then printing, we get from smallest to largest.
Shrink, print first, and then shrink some more. So that when we pass in a large number, we first print it out, and then we print out the rest of the smaller ones in decreasing order.
