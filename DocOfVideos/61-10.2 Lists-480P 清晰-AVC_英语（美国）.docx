Lists are a built-in data type in Python  that are used everywhere. To create a list,   we write a list literal. To bind that list  value to a name, we just use an assignment   statement. So here are some odd numbers. I can  get the element at index 0, or 1, or 2, or 3.  I can also get the number of elements.
Now, notice that the index of the last element   is one less than the length of the elements.
So the right way to think about this index   is the offset from the beginning. Offset of 0  from the beginning is just the beginning. And   then this is 1 after that, and 2 after that, and  3 after that. Now, this is just a call expression.   This is an element selection expression, where  you have some expression that gets evaluated,   that gives you a list, and then you have to  evaluate the index. So it is possible to put   arbitrary expressions in either of these places  and also to combine the results in any way that   I want. So I could say odds [3] minus odds [2],  and that gives me the number 2. I can then use   that as an index into odds. So that means you  can put an arbitrary expression here, which gets   evaluated first, and arbitrary expression there,  which gets evaluated second. And then once you   have the value here, which is a list, and the  value here, which is an integer, you're going   to look up that particular element in the list.
So when working with lists, we use list literals.   We can also write expressions to describe  each element in the list. And in this case,   digits would be bound to lists that were equal,  regardless of whether we wrote down the numbers   or expressions that evaluate to those numbers.  To get the number of elements, we asked for the   len of the list. Len is a built-in function. If  I want to find an element selected by its index,   I can use elements selection syntax, or  I can use the get item function in the   operator module, which has the same effect.
In order to combine two lists together,   or form repetitions of lists, I actually just  add and multiply. So if I say the list [2,   7] plus the digits list times 2, multiplying the  digits list times 2 just replicates its elements   twice. And then adding those to the end of  lists [2, 7] seven gives me one long list   with ten elements. I could also use the add and  mul functions from the operator module. Finally,   the elements of a list need not be integers.  They could be anything including other lists.   So here I have a list literal with two other  nested list literals. What I create is a list   with two elements, each of which are lists with  two elements, which are integers. And so asking   for element number 1 of pairs gives me this  element, which is a list with 30 and 40. So   here you see that there's a combined expression,  in this case, an element selection expression,   giving me a list, which I then select an  element from in order to get the number 30.
