Since sequences are fundamental to computing,  people have developed new kinds of statements   that help us manipulate or iterate over  sequences. And one of them is the for statement.  The for statement is a way of iterating over  sequences. I'll show you an example and then   I'll tell you exactly how it works.
I'll write a function that computes   the count of the number of times in a  sequence s, that some value appears.  Count the number of times that  value occurs in sequence s.  And using a while statement, I might write  something like total, index equals 0, 0.  While it's the case, that index is  less than the length of the sequence,   I'm going to look at the element at index of s.
So now I've selected one particular element to   the index. And if I start out with index 0, I'll  pick the 0 element. And if I change index later,   then I'll get another element later on.
So at some point down the line, I will   rebind index to index plus 1. And in this way,  I'll march through all of the elements of the   list. And what do I do with this element? Well, I want to figure out if element is   equal to this value that I'm looking for, and if  so, then I'll change total to be total plus 1.  And at the end, I can return total. So what have I  done so far? I've defined a function called count   that takes in some sequence, and counts the number  of times that say, 1 appears in that sequence.  Oh, there it is, 3 times, one, two,  three. Okay. So that's a useful doc test.  Let's just paste that in right there.
And then we'll talk about this implementation.  Well, let's try to make it shorter.
One thing we see here is that   total is rebound the total plus 1.
It's actually shorthand in Python for doing that.  I can just say total plus equals one.
And this is a different assignment operator,   that assigns total to be whatever total was  before, and then one more. And I can do the   same thing here and simplify that.
Okay. So we've made some progress.  But I think we can do better.
The meat of this implementation is here. And the   rest of this is just doing the work of iterating  over all the elements in a sequence, which is   such a common thing that we have a special  statement for it, called the for statement.  And the for statement allows us to  just forget about the index entirely.  And instead of saying while index less than  len(s), I just say, for every element in s.  And that replaces both of  these lines and allows me to   get rid of the index increment at the bottom.
So now if I read out what this implementation   says, it says, I'm going to keep track of  the total number of times I've seen value   in s. And for every element in s, if element is  that value, then I'll increase the total by 1.  If I run the doc tests, I'll see that it tried to  count 1 in this sequence. It was expecting 3 and   that's exactly what it got back. One test passed.
Okay. So that was an example of sequence   iteration where we use the for  statement. And how does it work?  Well, what happens is that the name element  is bound in the first frame of the current   environment. Not the new frame, by the way. No  new frames are introduced to the for statement.   But the name element is bound. And then  the suite of the for statement is executed.   And then the name element is bound to the  next thing, s. And we execute this again.  So when you have a for statement,  it's going to execute a suite of the   statement a number of times, which is the  number of elements in s. An element will   be bound to a different element of s each time.
So here's the execution procedures spelled out.   The syntax of the statement looks like this.
You need a name, you need an expression,   and you need a suite.
The first thing that happens   is you evaluate the header expression,  which must yield an iterable value.  Now, I said we're doing iteration, and  iterable values are related to that.  But this is a term that I won't define precisely  for several weeks. But for now, just think this   expression needs to evaluate to a sequence.
Later on, we'll see that there are other   things that we can put in there besides  sequences, and iterate over those as well.  But for now, just think I needed an expression  that gives me a sequence. I need a name to give   to each element in that sequence. And  then for each element in the sequence,   we'll bind that name to the element in the  current frame, and then execute the suite.  One more cool feature about for statements is  that you can actually do sequence unpacking,   right inside the header of the for statement.
So let's say I had a list of lists, I call it   pairs here, and I want to count the number of  pairs that are just the same element twice.  So I'm going to go through each  pair, and I'm going to say,   is 1 the same is 2? No. Is 2 the same as 2? Yes.
So same count will be one more than it was before.   3 and 2 are different, but 4 and 4 are the  same. So we'll increment same count again.  Now, what does the for statement  look like that can do that?  This is something that only works for  a sequence of fixed length sequences,   such as sequence of pairs. But in that  case, and you can unpack each pair into   separate names. So you can say for x, y in  pairs. Pairs is a sequence of pairs. X and   y are actually now bound to the elements in  each pair, as opposed to the pair itself. At   which point you can check if x equals y. And  if that's true, then change same_count to be   same_count + 1. So you're giving a name for each  element and a fixed-length sequence here. And   that's called sequence unpacking. And this looks  just like multiple assignment when you'd say x,   y equals some pair. Each name here, x and y,  is bound to some particular value in a pair.
