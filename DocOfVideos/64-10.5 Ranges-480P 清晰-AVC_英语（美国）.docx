Ranges are another sequence type. That means  they're sequences but they're not lists. Ranges   are there to represent sequences of consecutive  integers. Actually, they can represent all kinds   of integer sequences, but we're just going to  focus on the ones that have consecutive integers,   so counting upwards. Imagine an infinite number  line full of integers. Here's this small slice.   What a range does is it picks out a finite length  within this long number line by giving a starting   value, and an ending value, and selecting all of  the integers in between in increasing order. Now,   the way that I've drawn this is important, both of  these point to just before the number indicated in   the number line. So that means that negative 2  is actually included in the range from negative   2 to 2. But the number two is outside of the  range. So it's including this starting value,   but excluding the ending value. Now what a  quirky thing. Well, it actually makes a lot of   things simpler to do it exactly that way. You can  compute the length of a range just by subtracting   the starting value from the ending value. So 2  minus -2 is 4. And there are four elements here,   as you can see. Elements selection is also  easy, you just take the starting value and   add the index. Index starts at 0. So the element  at index 0 is -2, and the element of index 3 is   -2 plus 3 is 1. Okay. So it has length and  element selection, so it must be a sequence,   even though it's not a list. Now, how do you  convert to a list if you want to see the elements?  Well, you can use what's called the list  constructor, which is a built-in function   just called list. And when you call it on any  other sequence, it gives you back a list full   of the elements of that sequence. So a range isn't  a list itself, but calling a list on it does give   you a list of all those elements. That's the list  constructor. Now one special feature of ranges is   that if you leave out one of the numbers, so you  only specify one number, that's treated as the   ending value with an implicit starting value  of 0. So listing the range 4 is 0, 1, 2, 3,   including 0, but excluding 4. Okay. So if I create  a range from 5 to 8, let's say, it's not a list,   it's a range. If I wanted a list, I'd have to  call list on that value, at which point I'd see   exactly what elements are in there. Now, if I know  what a range is, I already knew that it was 5, 6,   and 7. But if I ever wanted to check and make sure  that it included the starting value, but did not   include the ending value, I could call list and  find out that for sure. Now, a range up to 4 is   a range starting at 0 and going up to 4. And if I  list out those values, I'll see that it's 0, 1, 2,   and 3. So what might we do with the range? Well,  there are lots of cases when the sequence you want   is exactly a sequence of increasing integers. So  if I wanted to sum all the integers below some   number n, I could do that by keeping track of  the total, grabbing each element i in the range   up to but not including n, and changing total to  be total plus i, and then returning the total.  At which point, if I sum_below(5),  I'll be adding 2 and 3 and 4 and   4 and 0, and that will give me 10.
Now, there are cases when you actually don't   care about the integers themselves. You just want  to do something a fixed number of times. So if,   for instance, I wanted to say Go Bears! three  times, a typical way to write that is a four   statement like this. Or if I now cheer,  it will say, Go Bears! Go Bears! Go Bears!  Now range(3) means that there are three  elements in range. And we are giving a   name to each element but we don't actually care  what that name is because we're not using it   anywhere. So one convention is that you use  a single underscore character or a blank,   just to let other programmers know that you're  not actually going to use this name anywhere.  It's okay if I put x there instead, but  I'd never use that x. So it really doesn't   matter what I put there at all. This is  an indication that you just don't care.
