List comprehensions are a powerful form of  combination in the Python language. And a list   comprehension, like the one that you see here, on  this second line, takes an existing list, in this   case, a list of numbers, and computes a new list  from it according to some expression. So this one   built a list out of the letters[i], for every i in  3, 4, 6, and 8. Where letters is this sequence of   letters, which gives me 'd', 'e', 'm', 'o'.
Time for a demo.  Let's start simple.
I'll create a list called odds with 1,   3, 5, 7, and 9 in it. Now, a list comprehension  can state, I want to compute a list that is x   plus 1 for every x in odds. And that will give me  2, 4, 6, 8, 10, where 1 became 2 and 3 became 4,   etc. And this happened by evaluating the  x plus 1 expression over and over again   with x bound to each of these in turn.
There's a more complicated form of a list   comprehension that includes not only an expression  of how to compute each element, a name, and then   the sequence that you want to compute over.
But also, the word if followed by some condition,   such as saying 25% x equals zero, which means I  only want to keep an element x if it's the case   that x divides evenly into the number 25.
So 25 divided by x has a remainder of 0,   using the remainder operator or modulo operator.
So 1 goes into 25. 25 times five goes into 25 five   times. But 3, 7, and 9 don't evenly divide 25.
So this part of the list comprehension lets me   select only part of the list  that I want to keep around.  And I can have interesting combinations of these.
So I could say I want x plus 1 for these elements   that evenly divide 25. And then I won't  get 1 and 5, but instead, I'll get 2 and 6.  So those are list comprehensions. I can  certainly put them inside of a function.  So for example, I might have a function that  computes the divisors of some number n. And   how would it do it? Well, then we just return 1  which divides everything. And then x for x in the   range from 2 all the way up to but not including  n if it's the case, that n divided by x equals 0.  So what are the divisors of 1? Well, just 1,  that's kind of a special case. How about 4?   You have 1 and 2. What about 9? You have 1 and 3.  What about 8? You have 1, 2, and 4. 12 has even   more. 18 has several divisors and these are all  the integers that evenly divide some number n.
