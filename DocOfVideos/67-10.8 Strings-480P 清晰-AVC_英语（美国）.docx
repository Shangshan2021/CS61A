Strings are my favorite.
Strings are an abstraction,   a representation of textual data. And I call  them an abstraction because we don't care about   the details of exactly how they're encoded. But  they do represent information. They can represent   numbers, and the way we write numbers can all  be represented with the string. Here we have   scientific notation. Here we have some point. And  all of these are just strings that somehow tell us   information. They can represent language.
And, as imagination bodies forth  the forms of things to unknown, and the poet's pen turns them to shapes,  and gives to airy nothing A local habitation and a name.  I think when Shakespeare wrote  Midsummer Night's Dream, he was   talking about computer science and abstraction.
You can also use strings to represent programs.  So here's a string that defines the curry  function. And Python source files are just   strings. So if I put this in a source file  and executed it, then I would have defined the   curry function. And by the way, if I start  up Python and create exactly that string,  curry lambda f: lambda x: lambda y:  f of x comma y, it's just a string.  But if I execute that string, well then I've just  defined curry. And if I curry the add function,   using what was just a string before,  I can, in fact, add numbers together.  So, some details about strings that you may  have discovered already throughout the course,   but I'll go through them now.
There's three different ways to   write down a string. I can use single quotes,  I can use double-quotes. And then the same,   except for that if you put an apostrophe  in the middle of a double-quoted string,   it works out fine. But if you do that  in the middle of a single-quoted string,   well then it would end the string.
You don't have to just put English characters   in the string. Ni Hao is fine. Single-quoted  and double-quoted strings are equivalent.  A triple-quoted string can span multiple  lines. So I use those a lot for docstrings   because a lot of times, docstrings will extend  the multiple lines when you add doctests. Now,   when I evaluate this multiple line string,  what it shows me at the end all fits on one   line. And what's happened is it used a special  symbol to encode the end of one line and the   beginning of another. This is called a line feed.  So whenever you see a backslash inside of a line,   that escapes the following character. And what  that means is that the two characters together,   this backslash and the following character,  really are just one thing in the sequence of   letters that is the string. And this backslash  n means line feed, which means start a new line.  Strings are sequences. The length and element  selection operations are similar to what you'd   expect. So the length of the city of Berkeley is  8, which means there are 8 letters. Each letter   is called a character. Now, actually, element  selection has the same indexing scheme 0, 1, 2,   3. But the result is not quite what you might  think. So what you get back is in string even   though what you're selected from was a string.
Now lists don't work like this. If you had a   list of numbers, and you selected the element  of the next three, you would get a number,   not a list. But for strings, you get a string, but  with only one element, only one character in it.  "In" and "not" are a little bit different for  strings than they are with other sequence types.   So, instead of looking for only individual  letters inside this sequence of letters,   you can look for whole words. So if I say  'here' in "Where's Waldo?", it will tell me   true. But if I said if 234 is in here, even  though 2, 3 and 4 are next to each other,   it would say false. And if I look for the list  in here, that would be false as well. So this,   you can only look for one element at a time. But  in strings, you can look for consecutive letters.   And that's because most of the time when you're  working with strings, you actually care about   whole words more than just individual letters. So  strings are a special abstraction, which are like   sequences in many ways, but they behave in a way  that's slightly different from other sequences.
