61a lecture number 12 announcements the cats project is due next friday but you need to finish phase one by next tuesday in order to get the checkpoint that's there to make sure you're making progress so that you finish on time it's a good idea to finish phase one even sooner than tuesday and you can just submit whatever you have that includes a completed phase one in order to get credit you'll get a bonus point for submitting the whole project by next thursday and what are the phases anyway well in phase one you measure typing speed and select things to type in phase two you build the autocorrect system that i talked about in the last announcement video and in phase 3 you build multiplayer if you want to try out multiplayer before you build it you can go to our implementation at cats.cs61a.org it finds other opponents by finding other people who are also trying to play a multiplayer game and then starting up a multiplayer game here we go oh this person's fast oh lost by almost five seconds so if you want you could try that out but more importantly you have to build it by the way if you haven't hovered your mouse over this gif yet i recommend doing so we have an exam prep session friday at 2 10 p.m lecture q a coming up recording so far are all stored here and the last announcement is that the hog strategy contest is over and i wanted to say congratulations actually to everybody who participated in the hog strategy contest we had a massive number of over 150 entries which i think is just awesome the thing that makes me most happy is just seeing lots of participation but since there were rules we do need to announce a winner and with first place winning 146 times there was a five-way tie i don't think this has ever happened before how could it be that there's a five-way tie for first well actually the submissions were different but the rules state that a submission scores a match point each time it has an expected win rate strictly above 50.001 percent and these five entries were all so close in their win rates that none of them beat another one by this very small margin but they were not all the same the five entries bobby tables anonymous poet the golden ratio wet app program and blockchain won or lost against each other in a very interesting pattern bobby tables had a win rate above 50 percent when playing against the golden ratio the golden ratio had a win rate above 50 percent when playing against the anonymous poet but the anonymous poet had a win rate above 50 when playing against bobby tables blockchain and anonymous poet had a win rate of exactly 50 percent against each other i think they were effectively the same strategy whereas all the other ones were different bobby tables among the top five won more than half the time against two opponents and lost more than half the time against two opponents it was actually only wet app program that won more than half the time against more opponents than it lost but it still had a lower than 50 win rate against bobby tables in any case these were the rules and so none of these entries scored a match point against any of the other entries leading to a five-way first place tie congratulations to everybody who was part of one of those winning entries here's the list of folks in reverse alphabetical order awesome job you all get extra credit points and if you want to see more about what happened in the hog contest you can go to the leaderboard here so those are all the announcements now we'll talk about today's content which is trees trees are one of my favorite topics in this course when we bring together what we've learned about containers and data with what we've learned about recruition in order to build recursive data and this is one of the main reasons that we learned about recursive functions in this course is to process tree structured data and today you'll mostly see trees filled with numbers or strings but tree structured data appears in lots of other programs as well when you're representing a website or an org chart or a system of government or anything else that has a hierarchical structure then you're going to need tree 