Box-and-pointer notation is a way to represent  lists within our environment diagrams.  So, the reason why we need a notation  is that sequential data can actually   become quite complicated. And that's  because of the closure property.  A method for combining data values satisfies this  closure property if it's the case that the result   of combination can itself be combined using the  same method. If I can put items within a list,   I should be able to take that list and put it  into a list. Closure is powerful because it   permits us to create hierarchical structures.  Hierarchical structures are made up of parts,   which themselves are made up of parts, and  so on. And that is an extremely useful way   to represent all sorts of things in the world.  So the important point here is that lists can   contain other lists as elements, in addition  to anything else. And that means that we need   a way to keep track of what's inside of what.  That's where we use box-and-pointer notation.
Lists are represented in environment diagrams  as a row of index-labeled adjacent boxes, one   per element. Each box either contains a primitive  value or points to a compound value. So if I just   say pair equals the list 1, 2, I'll write that in  my environment diagram by binding the named pair   to a list that contains 1 and 2. These small  numbers in the corner are just indexes of the   list. And so since the list has two elements, we  see two adjacent boxes. Now for a more complex   example, nested_list is bound to a list that  contains a list, a list, and another list. And   this third list contains list itself. And within  it are all sorts of things even a function.   So let's walk through everything that's on the  screen. Nested_list is a three-element list. And   so we see it bound to three adjacent rectangles.  Now each element of nested_list is actually   another list. And so that's why we see pointers  to compound values, lists or compound values,   functions or compound values, anything that  has multiple parts is going to be represented   using an arrow to some depiction of that thing.
Okay. So here we see that the element ID index   zero is just a list containing one and two.  The element at index one is the empty list.   Here we see the empty list. And the element at  index three is itself a list that contains two   other lists. And so that's why we see this  hierarchical structure where this is made   up of parts which are made up of parts.
The primitive values 3, False and None   can be written directly into the box. So  can 4, the function, we write as we've   always written functions before, and we use  a small arrow to say that it's contained as   this element at index one of the list that's  within this list that's within this list.
