Slicing is an operation that you can perform  on sequences, such as lists and ranges.  Let's say I have a sequence already. 3, 5, 7, 9,  11. And what I'd like to get out is just the 5   and the 7. So these are elements of index 1 and 2.  Well, I could get myself the indexes 1 and 2. And   then I could use that in a list comprehension.  I want odds [ i ] for i in range (1, 3). And   remember, range (1, 3) gives me 1 and 2 but not 3.
Okay, so that's one way to select out the   5 and the 7, a sub-list of this list.
Slicing is a notation for doing this more   compactly. It does the same thing without you  typing so much. You just write odds. And then   in square brackets, you say I want to go from 1 to  3. So it has the same rules as ranges. The indexes   include the lower bound but exclude the upper  bound. Now there's some additional flexibility,   just like if you leave out one of the boundaries  in a range, if you leave out the beginning number,   it's going to start from the very beginning of  the list. So odds up to 3 gives me indexes zero,   one, and two. I can also leave out the end and it  will go all the way to the end. So if I want to   start at index one, then I'll skip the 3 at index  zero, and get all of 5, 7, 9 and 11. And you can   even skip the beginning in the end, and you get  back all of the elements in the original list.  So these square brackets with a colon  inside are called a slicing operator.  Slicing always creates new values. So here are  some examples. I have digits, which is a list,   and then I slice it three different times. The  environment diagram that I get includes four   different lists. Notice the digits is unchanged  by the slicing. But when I sliced the 1 out,   saying that I want to go from the beginning  all the way up, but not including index one,   I got a new list with the value 1 in it. Asking  for the middle gave me a third list with 8 and   2 and asking for everything from index two to  the end, gave me a fourth list with 2 and 8.
