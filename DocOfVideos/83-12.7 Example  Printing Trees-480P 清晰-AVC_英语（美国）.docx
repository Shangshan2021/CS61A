Here's an example of one more  tree processing function.  I'll write a function that prints out a tree.  It will first print the label of that tree. And   then for every branch, it will call print_tree  on the branch. I don't return anything. Instead,   this function exists in order to display  a tree value, so that we don't have to   look at nested lists all the time.
If I call print_tree on fib_tree(4),   I can see all the values. But I can't see the  structure. Let's write a better print tree that   uses indentation in order to show the structure.  If I wanted to indent by five pairs of spaces, and   then write the number 5 after that, I would build  the string using multiplication and addition. And   if I print that out, then I get 5 indented.
By default, I don't want the root label   to be indented at all. But I want  the possibility of indentation to   happen later. Where I'm going to take those two  spaces, multiply them by the indentation level,   and then add a string representation of the  label of t. The way that indentation occurs   is that I'm going to indent all the branches.  And since this is defined in terms of indent,   if I get a branch of a branch, it will be indented  twice. So now when I print_tree(fib_tree(4)),   I can clearly see the structure. Even for a larger  tree. I can clearly see that there's fib_tree(4),   there's fib_tree(4) again, as one of the  branches. Here's the other branch of fib_tree(5).  The indentation level of a label  corresponds to its depth in the tree.
