welcome back uh we just talked about binary numbers and how we can represent number positive numbers between zero and two to the n minus one with an n bit binary number now obviously just the positive numbers is only one aspect of what you need to do in a modern computer so you need to be able to do things like negative numbers and fractions and other things so let's let's talk about negative numbers first okay so how do we encode negative numbers again we don't we don't get a minus sign right this isn't like we're writing um algebra on a piece of paper there are only two things we can represent on a computer zero and one that's it everything has to be done with those two bits of information okay and so we can't just put a negative sign in front of something that doesn't exist so we have to somehow figure out how to use series of zeros and ones to represent both positive and negative numbers and fractions and so on and so forth okay well so here's one idea we can just put a 0 in front of an n-bit binary number and that represents a positive number and a 1 represents a negative number and i could have switched these doesn't matter just something we come up with some standard some language that you and i or the computer and i agree upon okay so let's look at that let's see what that would look like so let's say i give you now a three bit signed binary number and notice here i have to be very careful when i give you these binary numbers to tell you what it corresponds to because if i just given you these this could have been a three bit unsigned binary number and this would have been the two to the two position two to the one position two to the zero but i'm telling you now this is a three bit signed binary number and so starting from the right this is the two to the zero two to the one but then this is the sign 0 is positive 1 is negative and look by the way you notice here that so all four of those are 0 and then the numbers go 0 0 0 1 1 0 1 1.
all of these are 1 those are negative same thing 0 0 0 1 1 0 1 1. so you see you get the negative numbers here the positive numbers here good so if that's the sign as we agree and then i have a two-bit binary number well we know what that is this is 0 1 2 3. let's just make sure we understand that this is 3 because it's 2 to the power 0 times 1 plus 2 to the power 1 times 1 so that's 2 plus 1 is 3. so same thing as we did in the previous uh lecture okay so what about the four numbers below well obviously these are negative numbers one one one one one so what is the negative number well it's whatever is in the two-bit position so that's 3 so this is negative 3.
that's 2 that's negative 2 that's 1 that's negative 1. well this is a little odd now i have a negative 0 which of course is the same as 0 so that's a little bit of an odd thing with this representation we essentially have two zeros a positive and a negative zero that's not great there's actually other problems with using this type of leading bit for the sign which i'm going to show you in a little bit and this in fact is not what modern computers use they do not use this it seems like a really easy thing to do and frankly it's good for us as humans because i can look at that first bit and as long as i know what it is i can immediately tell you whether it's positive or negative and then i just have to interpret all the bits beyond that but as it's going to turn out for computers it's a pretty clumsy representation and instead of doing the the assigned representation we're going to do what's called the two's complement representation so let me describe what i mean by that so we need again a mechanism to represent positive and negative numbers okay so i'm going to start with an unsigned so that means that first bit has nothing to do with the sign right now uh 4-bit binary number where the left most bit is always zero okay so this bit is going to be the sign but not in the way that i showed you before okay so this number must be a zero for it to be a positive number okay and then this of course is 2 to the 2 2 to the 1 2 to the 0.
so let's make sure we understand why that's 6. this is 2 to the 1 that's 2 2 to the 2 that's 4 4 plus 2 is equal to 6. okay good and and so we start with an unsigned four bit or five bit or six bit or whatever you want where the left most bit is zero and that zero of course is going to correspond to positive numbers but again not in the same ways above and you're going to see in a minute why that is now to make that number to get negative six here's what i'm going to do so we know how to do all the positive numbers right it's just zero in the uh fourth position and then you just run through all of the two to the three minus one possibilities for these three bits good how do i make negative six so here's what you do take that representation of six and flip the bits it's called complementing the bits so zero goes to one one goes to zero one goes to zero zero goes to one that's the complement where every bit has been flipped notice that by definition that first position must be a one why well because that is by definition a zero and when i flip that it's going to be a one so anything that has a one in the f in that uh significant most significant position will be negative but the interpretation is not the same as what i showed you up top because that obviously is not six right there that's something else okay so we have to figure out what that actually means okay so complement your binary number and then add one okay so here's my six zero in the in the most significant position complement it all the zeros go to one all the ones go to zero and then add one so what does it mean to add one to here well one plus one is two that means i carry the 1 drop the 0 the 1 comes down right there and i've got 1 0 1 0.
that is negative 6. now what's odd about this representation is if i look at those just these three bits right here that doesn't look like six two to the zero two to the one that's a two so we can't look at this and just say oh the way we did with either positive numbers or with the signed or the non-two's complement sign thing it's a slightly different representation and it seems like we've taken a step backwards this doesn't seem better it seems worse it seems more complicated but it's going to turn out that this is not written for you and me it's written for the computer and i'm going to show you in a minute why this is a really nice representation of negative numbers for computers even if for us it's a little bit harder to read all right so let's look at this now let's say i have a three bit signed using two's complement binary number all right so let's do the easy ones so the positive zero through three is what we must have a zero in the most significant place so that means there's only four possible numbers two to the two minus one and that's the same as before zero zero zero one one zero one one good so that's obviously three two plus one that's two that's one that's zero good now i want the negatives of these now there's this thing with zero we're going to have to sort out remember in the previous one with the signed representation we get this two different representations of zero we'll come back to that in a minute how do i get the negative number of a positive number i complement the number flip the bits i add one and that will give me the negative representation of that positive number so let's just go ahead and do it for all of these and we'll also see what happens to that zero right there okay so let's just start with one and i'll come back to the zero in a minute so please uh if you will complement zero zero one that's one one zero add one to that so you can do this in good old fashion what you learned in grade school you put a one under here you add those two you add these two you add these two remembering to carry and doing what a two bit a one bit addition uh binary addition rather so that zero plus one is one and then there's nothing to carry so one one zero the complement of this plus one is this that is negative one that's it that's the representation let's do this one let's flip the bits 0 1 0 gives me 1 0 1. 0 goes to 1 1 goes to 0. add 1 please okay what's 1 plus 1 two what's two in binary one zero so the one carries into this position and the zero comes down then one plus zero is one and then i've got a one so i've got one one zero that is negative two okay and notice again that this position here must always be a one because when i flip the bits i'm always going to have that zero flip into a one let's do one more uh flip three which is zero one one it goes to one zero zero add one that of course is just one zero one that is negative three okay now let's see what happens with zero you can sort of see what's going to happen by the way so what happens when i complement zero zero zero i get one one one and what happens when i add one to this well okay so let's put the one here i'm gonna carry the one and drop the zero that's two again i'm gonna carry the one drop the zero that's two again i'm gonna carry the one and drop the zero so i've got all zeros and then there's this one which we call an overflow it's the fourth bit but i've only got a three bit number that fourth bit it goes away we can't represent that and so i end up with ah very nice zero so this is one very nice thing about two's complement is that the two's complement of zero is zero now one of the strange things about two's complement is these numbers are a little cryptic right if i just give you this number it's not immediately obvious that's negative 2 negative 1 or negative 3. you have to sort of reverse the process to get back okay but i'm going to show you that for a computer this representation is fantastic because it makes things like arithmetic very easy and by the way we only have one zero which is just a nice thing to have okay so one odd thing here is we seem to have lost a number why i've got 0 1 2 3 and i've got 0 which is the same 0 and then i've got negative 1 negative 2 negative 3.
so i only have 7 numbers but with 3 bits if this was an unsigned binary numbers how many numbers should i have with three bits two to the three minus one i should have eight numbers seven numbers right from zero to seven i've only got one two three four five six seven where did that last number go huh well something's missing yeah so where is it let's see uh well okay i see that i have four numbers starting with a zero but i see they only have three numbers starting with a one so which one is missing can you see it good one zero zero it's not in here okay now what does one zero zero correspond to well it's this sort of weird two's complement number i don't know but i do know this i know it's a negative number um so how do i figure out what the positive correlate is well i've got to run this process in reverse so what do i do i have to subtract a 1 from here complement again and then i get the positive number and by the way why do i complement again how is that the inverse well if i go from zero to one by by flipping i can go from one to zero by flipping again so if you complement a number twice you get back to it so the inverse of complementing is just complementing all right so let's figure out what this is what is this number i mean you sort of know it's it's probably negative four but let's convince ourselves of it all right so let's do one zero zero we're gonna subtract one we're gonna complement and let's see what we get all right what's one zero zero minus one okay so a couple of ways you can do this here's one you can just write out the binary numbers in order there's one zero zero and you can subtract one by seeing that the previous number is just zero one one okay good so uh one zero zero minus one is zero one one let's complement the bits so that's gonna give me one zero zero ah what's so what is that one zero zero so this is now the positive number notice by the way there's a one there which looks weird because there should be by definition a zero but this is not this is the negative number we're simply reversing it so this is two to the zero two to the one two to the two that's four here which must mean that it's negative 4 over here all right good so now what we have is an interesting asymmetry if i had an n bit unsigned binary numbers i would be able to go from zero to two to the n minus one so i'd have two to the n total numbers but the max number would be two to the n minus one with a n bit signed using two's complement binary number i go from minus two to the n minus one to two to the n minus one minus one that is there's one less positive number than negative number let's make sure this makes sense to us yeah so in this case what do i have n is 3 right so if i have n is 3 then what is this representation so it's 2 to the 3 minus 1 which is 2. my 2 to the 2 is 4 so that's my negative 4.
here i've got 4 minus 1 so that's 3 right there so there's a slight asymmetry and by the way why is there an asymmetry just because there's only one zero now right so you're going to have one more on one side than the other and it just turns out you have one more negative number turns out in practice this doesn't matter at all but just notice the the slight asymmetry here okay so why i mean this just seems like an awful lot of work and a lot awful lot of hassle to do this two's complement because now i can't read these two's complement numbers trivially i've got to go to subtracting one and complementing it so why am i doing this well one reason is you get the single zero representation and that's nice but here's the real reason is that when you do arithmetic with two's complement it works out beautifully and let me show you how that works all right so let's go back to unsigned binary numbers and let's just do some binary arithmetic so let's say i want to add 2 plus 2 that's my of course in base 10 let's write out the 4-bit binary representation of 2 2 to the 0 2 to the 1 2 to the 2 2 to the 3.
so 2 is just 1 times 2 to the 1 and then 0 everywhere else so there's 2 there's 2.
all right how do i add same way i add in base 10.
so just column by column 0 0 is 0.
1 plus 1 is 2. 2 in binary is 1. i carry the 1 and i drop the 0. so now i've got one plus zero plus zero that's one and then i've got zero so that is the four bit the four bit sum of these two uh two four bit numbers and of course what is this well that's two to the zero 2 to the 1 2 to the 2 that's 4 and that's of course 4.
so in the same way that i can add in base 10 i can add base 2.
you just add up but you just do everything in base 2. so let's see how this works if we use the old fashioned signed representation the non-two's complement okay so let's sum up two and negative two of course that should be zero well in the old-fashioned assigned representation two is what zero zero one zero that zero tells me it's positive and then i get the three bits to represent every number between zero and two to the n minus one which in this case is seven now to make this negative i simply flip that bit to one and everything stays the same i love this representation i find it really easy to read i don't have to go through all this sort of computation to go from two's complement back to uh to regular binary so i can figure it out but let's see what happens when we try to add these two things up okay zero plus zero zero one plus one is what two what's two carry the one drop the zero so now i've got one plus zero plus zero is one and then i've got zero plus one is one and that's what i get is that zero absolutely not so the simple even the simple and by the way this makes sense it shouldn't be zero because these aren't numbers in the same way they represent sign so this makes no sense at all and so doing that simple arithmetic with signed numbers simply doesn't work and by the way that's not an accident take any two positive negative numbers try to add them up and you won't get zero so here's three here's negative three sum them up you get this mess here which of course is not zero but when you do this with two's complement it's really nice how this works out so let's find out all right so let's add two and negative two now here's the drawback what is negative two and two's complement well i gotta do the calculation okay fine let's do the calculation so negative two is i complement this number and add one so please complement for me zero zero one zero that's up here those zeros turn into ones the the ones turns into zeros and then i add one and i get that number right there okay good so that in two's complement is negative two let's drop that down and now let's add the old-fashioned way all right zero plus zero is zero 1 plus 1 is 2. carry the 1 drop the 0. 1 plus 1 is 2 carry the 1 drop the 0. 1 plus 1 is 2. carry the 1 last time drop the 0. that one by the way is an overflow it's the fifth bit it's getting flushed don't care about it and now i've got zero so notice this very beautiful representation allowed me to do simple bit edition which by the way is where all the magic is and computers doing those types of computations and it's incredibly simple let's do another example to show you that's not a fluke so in two's complement four bit two's complement this is still a three two to the zero one two to the one that's two so two plus one is three so that's three and then of course that number has to be a zero if it's a positive number let's figure out what negative three is all right go back up here complement the zeros turns into ones the ones turn into zero add one i go from one one zero zero to one one zero one that right there is negative three drop it down add up all right one plus one is two carry the one drop the zero one plus one plus zero is two carry the one drop the zero one plus zero plus one is two carry the one drop the zero last one one plus zero plus one is two carry the one that's an overflow it's our fifth bit drop the zero and you get zero so when you add two n bit twos complement binary numbers simple binary arithmetic just works and that is really beautiful and by the way not at all obvious when we set out to do this it seemed like we were doing this weird thing in this representation that's hard for us to read but it turns out it's incredibly nice for the computers because it allows computation to happen very nicely okay this is great we now have uh positive numbers and negative numbers we need a little bit more and then we're going to start looking at the nature of computation on binary numbers all right we'll see in a 