welcome back so at this point we've now seen how to represent positive and negative numbers in a binary representation and of course the binary representation is the language of modern computers i just want to do a little bit more just to make sure we have a really firm understanding of this language and then we'll start talking about computation let me remind you also again that we have different types of binary numbers we have unsigned binary numbers where if you have an n bit binary number you can represent from 0 to 2 to the n minus 1 positive integers 0 1 2 3 et cetera if you have a signed representation you use the first bit to represent sine 0 is positive 1 is negative but we saw that that leads to some problems multiple zeros and bitwise addition doesn't seem to work out so in fact we're going to be using two's complement for negative numbers zero in the first place is still positive one in the first place is still negative but the numbers have a different meaning and we saw that this very nicely in the previous lecture gave rise to being able to do addition with two's complement binary number and everything works out very nicely so just to make sure that we're all on the same page here let's do a couple of exercises and remember again that whenever i give you a binary number like this i have to i have to tell you how it is being represented i have to say for example this is a four bit signed with two's complement binary number because if i just said it's a four bit binary number could be unsigned zero to 2 to the 4 minus 1. if this was the plus or minus here then these numbers mean something different so i always always always have to tell you if i ask you what is 0 1 1 1 in decimal and that's all i ask you you have to say you have not given me enough information i you i need information to be able to decode this okay so if i tell you that this is a four bit signed using two's complement binary number what is that number and decimal okay so let's think it through what do we know about that position that corresponds to the sign if it's zero it's a positive number and if it's one it's negative and if it's one not only is it a negative but it's in that two's complement representation which we have to undo but if it's positive i'm home i actually know what this number is what is it it's just two to the one times two to the zero plus one times two to the one plus one times two to the two so four plus two plus one okay is equal to of course seven good so if the n bit sign two's complement binary number starts with a zero it's a positive number you simply decipher all of the bits after that most significant bit now on the other hand if it's 1 0 1 1 now we have to do a little bit of work because it's not enough to just take this number and try to convert it because that's not the positive number all right so this one tells me it's negative which means i have to undo the two's complement all right how did i get two's complement i complement flip the bits add one how do i undo i subtract one and i complement it again and that's of course because the complement is its own inverse because when i flip from zero to one the way i go back is just flip from one to a zero all right so let's do that let's subtract one from one zero one one all right well if i just put a 1 here and i subtract that position goes to 0 so i get 1 0 1 0.
let's flip the bits so the 1 becomes a 0 the 0 becomes a 1 and now i have this so good there's a 0 in that position and if there's not you've done something wrong because when i undo the two's complement i better get a positive number so if that's not a zero something's wrong go back and check your arithmetic now what do i have i have a positive number that i can decipher in the same way that i just did earlier two to the zero two to the one two to the two all right two to the zero is one two three two one two to the two is four four plus one is five so this number in as encoded as a 4 bit 2's complement binary number is sorry this number is 5. so this number is of course negative 5.
okay good so practice that make sure you can go between uh binary numbers and decimal numbers um and make sure that you understand how this two's complement with the adding and the subtracting and the complement works okay so at this point now we have positive and negative numbers okay and we have a couple ways of representing the negative and we're going to stick with the two's complement from now on that is the representation we will be using so obviously if we're going to do computation arithmetic addition subtraction division we need to also be able to encode fractional numbers and i can actually spend a fair amount of time talking about that but i'm not going to and instead i'm going to just mention very briefly how fractional numbers are represented in binary and the way they're represented is with one two three four five parts so there is a mantissa which is plus or minus that's two parts there is the base and then there is an exponent which also has a plus or minus so two parts for the exponent the actual exponent and then whether it's positive or negative and the mantissa and whether it's positive negative and then a base so for example what do i mean by this if i want to represent one dot o i would have a mantissa of one the base would say be ten and the exponent would be zero if i want to do 0.1 then this exponent would be minus 1 and so on and so forth so this is just good old-fashioned scientific notation and notice why this is nice for representing fractional numbers is because that's an integer that's an integer and that's an integer and i know how to do integers and bid binary numbers and in fact i know how to do signed integers and that's what that so all i have to do is represent one signed integer another signed integer the mantissa and the exponent and then whatever the base is and once i've got that i pack them all together and i've got fractional numbers okay good so at this point now we have enough of a language there's a little bit more we could talk about but i'm going to stop here because i want to get into the nature of computation so at this point we have the language of modern day computers which is binary numbers and we know how to represent positive numbers and negative numbers and fractional numbers okay and now what we want to start asking ourselves is how do i do computations how do i build a calculator right for example how do i do in excel spreadsheet add two numbers subtract two numbers divide two numbers do modular uh division and that's what we're gonna see next is how do we go from this binary representation to actual computation and what's going to be really magical here is how incredibly simple it is there's really only going to be three things we have to learn and three things only and we're going to be able to build the basics of a modern computer okay we'll pick it up in a few minutes see 