Print and none. so, as you know, if I type  an expression into the interactive Python   interpreter, it will then display the value of  that expression. it's also the case that if I   call print on the value -2 I'll see the  same output. but two different things have happened   here. let's try to understand the difference. okay  so if I type go bears I see go bears is the   same as exactly the expression that I typed in  because this is a string literal and so we see   the string value. if on the other hand I print  go bears, let's see almost the same thing, but   no quotation marks. so there must be a difference  between printing and just evaluating something. we   can see more of this difference when we look  at the special value called none. none represents   nothing. if I just evaluate it I see nothing if I  print it out I actually see none. so what's going   on here is that python has rules for automatically  displaying the value of any expression you type in, so automatically displays this -2 or  this go bears. none's a special case for nothing   gets displayed automatically but if I print it  I can make it appear. okay what else can print do?   well print can print multiple values separated by  spaces and it can print none so I could print none   and then none again. here's an interesting case: what  happens if I nest calls to print? spend a moment   thinking about what will happen and then I'll  show you in 3..2..1. 1, 2, none, none. let's   understand exactly what happened there. first, what  is none? none indicates that nothing has been   returned from some function. so the special value  none is just there to represent nothing. in python   it's called none, in other languages it has other  names. a function that does not explicitly return   a value will in fact return none. none is not displayed  by the interpreter automatically as the value of   an expression. if I try to define a function does  not square X which just computes X times X but   doesn't return it, then I've created a function  that returns nothing because there's no return   there. so when I call does not square 4 I don't  get 16 back. instead I get none. however, according   to this third rule, none is not displayed by the  interpreter as the value of an expression. so   here's a call expression. if I evaluate it 4 does  get multiplied by 4 but it doesn't get returned.   what gets returned is none and none doesn't appear  at all. okay next I could say 16 = does not   square 4. what's going to happen here is we'll  compute the value of this call expression. it will   evaluate to none which will be bound to the name  16 so the name 16 is now bound to the value none   if I just type in 16 nothing will be displayed. if  I type in 16 plus 4 I will not get 20 I will get   a type error that says unsupported upper end types  4 Plus none type and int what does that mean well   this plus is the same as that plus. and what it's  saying is that I tried to add together a none and   an int - that stands for integer. 4 is an integer. so  this kind of error might arise when we've tried   to add something to nothing which you cannot do.  okay, back to print. well it turns out there are   two kinds of functions: pure functions that just  return values and non pure functions that have   side-effects. a pure function is something like  ABS which computes the absolute value of its   argument. the absolute value of -2 is  2 and the only thing that abs does is return   the number 2 whenever you call it on -2. that's the argument, that's the return value.   here's a picture of a pure function. it's a closed  pipe that goes from inputs to outputs   pow is another pure function. I pass in two arguments. I  get out one return value. now, non pure functions   are completely different. they take in some input.  they also have some output. in this case, print has   the output none or the return value of none, but  in addition, instead of being a closed system it   also has a side effect -- that's what's coming out of  here. is that in addition to returning none, print   displays whatever was passed into it. so in this  case we passed in -2 is an argument. it   displays the output -2. the return value  is none. the side effect isn't a value at all. it's   just something that happens its behavior that's  a consequence of calling the function. so print   is a different thing then abs or pow because  it has side effects. and that's why we get such   interesting behavior when we nest print calls  within each other. so let's look at that print,   print one, print two, nested expression again, where  what we saw afterwards was one two and then none   none we can't understand what's going on here  and we can do it using an expression tree so   in order to get the value of this nested call  expression we first evaluate the operator which   is a function that prints. the first operand  is another call expression which we evaluate   by evaluating its operator and its operand.
now we have the function print applied to 1   when we actually apply print to the number 1  we have a side effect of displaying 1. that's   where this first 1 came from. it was while we  were evaluating this operand sub expression we   got a 1 displayed but it's not the value of  anything. it just appeared there because that's   what print does is it makes things appear. now we  got a value for this expression as well which was   none because that's what print always returns.  next we evaluate this operand which is itself   a call expression, and applying print to the  number 2 displays the number 2 which we   see here. and the value of that sub expression  is none. so now we have print applied to none and none. when we apply print to none and none  a side effect of that is to display none none   which we see on this line and eventually we  get the value for the whole thing which is   none. output here - that none doesn't get displayed  because the interactive interpreter for Python   doesn't automatically display none when it's  the value of an expression typed at the prompt 