now we're ready to start talking about the nature of computation using binary numbers as representations okay so let me start with a very simple idea that i'm going to have you think about the binary number one as true and the binary number zero as false and the reason i'm going to do this is i'm going to introduce boolean logic which you're all familiar with very simple concept but to do that it makes it a little bit easier to just think about we're going to operate on true and falsehood okay where one is true and zero is false okay so it's a simple translation in your head okay so let me remind you what the boolean operators are there are three of them logical and logical or and logical not okay and these have the plain text reading of those words so if i tell you it is sunny outside and it's warm outside it means both are true if i tell you that it is sunny outside or it's warm outside one or both are true and if i tell you it is not sunny outside well then it's not sunny outside so it has that saint that logical plain text reading but let me go ahead and define it formally with so-called truth tables so my truth table here has four rows and three columns the first two columns denote the values of my two inputs a and b so when i compute logical land i ask for the and of two things sunny and uh warm and then i output to you the logical and of them there are four possibilities here which correspond to all possible inputs why well there's two inputs and they can each take on two values so there's four permutations zero zero zero one one zero one one the order i put in here doesn't really matter okay what is the logical and of two statements that are true so if a is true and b is to remember again here that i'm substituting think about these as true where it's one and false word zero if a is true and b is true then the and is true good in all other cases the logical land is false so if this is true and this is false then they're both not true if this is false and this is true they're both not true and if they're both false you better believe that the and is also false so for a logical and operator the only time that the and of two things is true is when they are both true okay good simple calculation and it's computation by the way it's got an input and it's got an output it's pretty simple computation but it's a computation all right let's do the logical or same truth table this side stays exactly the same two columns for the input one column for the output and there are four rows corresponding to exact same thing zero zero zero one one zero one one now remember that or is true if one or more of the statements are true so here they're both true so the or is true a is true so the or is true b is true so the or is true and here of course neither are true so the or of them is false okay so that's a logical or now logical not has only one input so the not of something you don't not two things so now i only have two columns my input and my output and i only have two rows which are the values that a can take on which is zero or one true or false and the not is it's sort of like complementing a bit so the not of true is false but not a false is true so those are the three logical operators okay now i've already said this but let me emphasize it again you can think about this as computation i have an input a and b and i have i do a computation in this case it's a lookup in a truth table and i have an output and notice that the input is a boolean variable zero one true false and the output is also a boolean variable true false okay so everything is staying within that boolean construct and of course i care about that because we're going to be building a computer with only the ability to represent zero or one okay so now here's the beautiful thing about logical and logical or logical not the ability to compute those three things on two binary inputs or in a not on one is the building blocks of a modern day computer they are completely built on being able to do those three incredibly simple and surprisingly simple calculations so what i'm going to do is i'm going to take this truth table and i just want to abstract it out and and render it or draw it or just depict it as this thing right here so this is called the gate we're going to be talking about that in a little bit more detail and it's simply think of it as sort of a graphical representation of this computation two inputs come in a and b those are my first two columns some computation happens that determines if both of them are true we'll talk about that in a little bit how we're going to build this for you and then out comes an output so zeros or ones come in here two columns here zero one comes out here this and inside of here is a computation we don't know how it works yet it's abstracted out but we'll we'll show you that in a little bit so this is called a logical and gate it's drawn as this big d and we often draw a little dot in there because sometimes our drawings get sloppy and that helps us know that it's an and gate now in or gate again simply implementing the or table here the truth table has same thing two inputs corresponding to the two columns one output corresponding to the logical or this time it's drawn as this sort of curly um d here and it has a plus on the inside which is a way of representing or computation there's a computation going in here we don't know what the computation is yet again we'll see that in a few minutes but two binary numbers come in one binary comes out it's a computation it tells me whether one or more of these variables is true or not and lastly logical not is represented as a gate with only one input one column one output one column and now it's a triangle with a little circle at the end so zero one comes in zero one comes out there's a computation going on there that says how do i flip from a one to a zero and from a zero to a one okay so now if i can build these things this logical and logical or logical not from actual physical things i have the building blocks for computing and or not and then i've got to show you that i can actually build a modern computer with only those three operations and that's sort of the magic of a modern computer is you don't need anything more for the basic computation obviously you have the display and the mouse and the keyboard and all those other nice peripherals but in terms of the core computation we're going to show how you can build modern computation from three simple logical operators okay so i'm going to pick it up there i'm going to show you how we're going to build logical and logical or logical not from transistors and then we're going to start talking about the nature of computation and how you actually pull all these gates together in order to do real computation 