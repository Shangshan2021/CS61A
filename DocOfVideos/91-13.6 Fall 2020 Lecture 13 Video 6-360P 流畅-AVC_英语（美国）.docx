in the last lecture i promised you that we are going to be able to do computation using only logical and logical or logical not now what i have to do first is show you how i can physically build those gates to compute and or and not essentially implement those truth tables two inputs one output for and and or one input one output for logical not and i'm going to build those and then in the next lecture we're actually going to use those gates to actually do computation all right so let's start by building a couple of gates and or not all right the building blocks of a modern computer are transistors and you've almost certainly heard of that word i'm going to show you one version there's many versions of transistors i'm going to show you one that's particularly simplified slightly dated this is not what modern transitions look like but i like this because i think it's particularly easy to explain so here's the transistor it's got a very simple construction there is power that comes down and the transistor can control this little door here so when the door is open nothing goes through and then when the door closes everything goes through so what do i mean by that so these are the two states you can think about these as zero and one by the way obviously you can think about this if you want is water coming down a hose and here the hose is pinched so nothing comes down and if i took a reading down here i would say there's no water coming out here i've unpinched the water so it comes straight down and i've got water and i've got power i've got a signal here so obviously this is not going to be water it's going to be electricity i can stop the electricity from flowing in which case i have zero there it is and i can allow electricity to go through and i have one there's my binary representation these transistors represent in one of two states a zero or a one and now what i have to show you is how do i combine these transistors which are physical realizations of the language of computers zero or one in order to compute and or not and then i have to show you how do i go from and or not to actual computations like addition and multiplication all right so let's start with logical and so what do we know about logical land two in one out two inputs a and b which can either be zero or one and now we know that this transistor can represent one a and this transistor can represent b so here's a tr here's a representation where i've i've i've opened these doors so that i have a zero here and i have a zero here and i have power here so what did i do i put these transistors in series so i have power coming down transistor one which is a that's the input a and the output of that goes into the next transistor so why is this okay well because this is zero one what's this zero one so it's all fine it's all the input the output of one can be the input to the other it's just power coming down okay so let's think about the various state that these two transistors can be in so here's the state 0 0.
so if power's coming down here and this is a zero and this is a zero then what's the reading down here in the little gauge that i had of course it's zero nothing comes down it's being stopped twice in fact okay so let's uh set one of these bits to be one so power comes down what's the reading coming out of this transistor zero so if zero is coming into here it is allowed to flow through but there's nothing coming into there so of course the reading here has to be zero so input zero input one output zero okay let's flip those let's say we allow the power to go through the first transistor but not the second one what's the reading here so we've got power down to here but then it stops so the reading there is zero again so one more right one one so now i have a clear shot through power comes down goes through the first transistor goes through the second transistor and now i have a reading of one and so the output is one okay so let's think about let's look at all four of these together and see what that looks like so with two input zero zero i get an output of zero zero one i get an output of zero one zero i get an output of zero one one i get an output of one what is this it's an and gate it's an and operator so think of these left left to right here as the columns of the truth table four rows zero zero zero one one zero one one and think of this as the last column which is the computation so i've built an and gate i've built something that where i can set two inputs that's my input i get to decide what those values are and by simply putting these transistors in series i have computed a logical and great okay i can do computation now of a logical and now i just have to be able to do or and not so let's do or okay just to remind you that's an and gate so let's do an or gate now i know i need two transistors because i have two inputs right so there are my inputs i just set them to be zero and one for now let's think about the nature of an or now that we've thought about through what happens when you put those two transistors in series so the reason why that's an and gate is the only way to get the power from the very top to the very bottom is both are one right and that's only time that an and is true but with an or i want something to come out if one is one if the other one is one or they're both one so i don't want i can't put them in series because one has the veto power but i don't want anybody to have veto power so what if instead of putting them in series top to bottom i put them in parallel like this what happens so let's think about the power coming down i split the power along the top i bring them down into both transistors so this one stops the flow but this one allows it and out comes and there's my one so as long as one of these is open i'm going to get a 1 here now notice by the way if i switch these if this was a 1 and that was a 0 i would still have a 1 here the order of these doesn't matter all right what happens if they're both one no problem at all i still get power out the other end good and what happens if they're both zero power comes down stops here stops here so i have a zero here what did i just do i built an or gate if this is 1 0 or 0 1 power comes through because they're in parallel if they're both 1 power comes through and i have a 1 and if and only if both of these are zero then no power comes through and i get a zero that is the definition of an or gate two in one out of course by the way the power is just provided to you by virtue of your battery or plugging in so you don't have to worry about where that power comes from all right we have an and an or gate both of them are built by putting two transistors which simply represent one of two states binary in parallel for an and gate sorry in series for an and gate and in parallel for an or gate now we have to build a noc gate okay so a not gate only has one input and one output so let me orient orient you here this is a little bit of a different picture here power comes down this is the output right here i'll describe this resistor to you in a second so power comes down and this is where our output has been and now it's junk we're simply going to ignore it so i'm going to wire up the input here i can control that transistor door this is going to be my output and of course this is still the power and this is a resistor so what does a resistor do the resistor said look power can come through here but i don't like going through there i prefer not to go there and so if there's no other route to go you can you can come out this way so what's going to happen is power's going to come down here and it wants to go here but this is totally shut off and so the power will actually go through the resistor but if this allows the power to go through this way is seamless frictionless and so the power goes straight down and it doesn't go out through the resistor and then that's a zero ah this looks about like what we want on the previous slide i had an input of zero which would not allow the power through so the power has to go out through the resistor and i get a one there zero to one now the power can come through gets pushed out to junk don't care but there's no coming power out here because it didn't want to go through the resistor i have a not gate now for the nokia of course i only need one transistor and that little resistor right there all of which of course are physically realizable all right so what have we done we've taken this very very simple little thing this little tiny transistor by the way these are the there's a magic of squeezing all that computation onto the phone in your pocket is because those transistors every year get smaller and smaller and smaller and smaller and i can pack millions and billions of those into a square centimeter and do phenomenal computing power because they are the backbone of all modern computation and we can build logical and logical or logical not from two transistors in series for an and two transistors in parallel for an or and a transistor and just a little resistor for a not so now what i have to convince you of is that that's enough to do modern computation which seems like a real stretch by the way you probably believe that i could build these gates super simple calculations but how do i go from those gates to actual computation that's what we're going to see next so 