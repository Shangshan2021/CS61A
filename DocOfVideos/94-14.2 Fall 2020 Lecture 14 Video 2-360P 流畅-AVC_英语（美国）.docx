welcome back so let's see where we left off so at this point we know that you can use binary numbers only zeros and ones to represent numbers positive and negative and floating point numbers and we know that uh we have three basic uh boolean or logical operators logical and logical or and logical not uh and i showed you using transistors two in series for an and gate two in parallel for an a and for an or gate and a single transistor and a resistor for a not gate how i can physically build these logical boolean operators and or not and now what i need to show you is how i can go from these three incredibly simple operations computations to full-blown computation on a modern computer that's what we're going to start talking about today so let's go ahead and just dig in so let me start by defining a circuit so a circuit is a collection of logical gates you know what a gate is that's simply an instantiation of and or in not using the transistors but you know this again is the power of abstraction so at this point i'm going to just start calling them gates i don't have to worry anymore that they're built from multiple in series in parallel resistors transistors doesn't matter they're just gates they are operations that do and or not okay so a circuit is a collection of logical gates that transforms a set of binary inputs into a set of binary outputs it's just a function so a bunch of things come in that are binary because that's the language of modern computer and a bunch one or more things can come out which are also binary such as definition of a circuit and all it's made up is a collection of gates so all you get to do is and or and not okay so let's look at a really simple example so this is not a meaningful computation i'm not computing anything that's meaningful i just want to show you an example of a circuit and then of course we'll get into meaningful computation in a little bit and then how we build these circuits but i just want you to see what a circuit would look like so typically in a circuit the input is on the left i have two inputs here a and b this can be a zero or a one this can be a zero or one i have two outputs c and d of course these have to be zero or ones because they are the output of pushing binary inputs through a series of gates and here are my gates so here's an or gate remember the shape of the ore gate it's got that sort of funny rounded back and a plus sign in the middle just to remember it's an or here's an and gate with a little dot and i have a not gate right there and a not gate right here so let's see what's happening here so let's see this output is the result of what a is coming into this or gate b is coming in and notice that little white dot right there that tells me i'm going to take this input and i'm going to bifurcate it i'm going to bring it up here into this or gate but i'm also going to carry it through into this knot and eventually into this and so that little dot tells me that the same signal goes in two different directions so whatever b is it comes up here and out of here comes what a or b so the output c is simply the result of a or b not meaningful it doesn't mean anything right now but let's not worry about it i'm just trying to show you what a circuit looks like so that is the output and of course since a can be zero or one true or false b can be zero one true or false c of course is zero or one true or false so let's see what d is okay so let's see so the output of this or is coming into the and gate so first of all is that allowed sure this is just a zero or one and the result of oring these two bits so this is just another binary number it's coming in so this is the and of a and or b and what else well let's see b comes in here it goes through a not gate which i'll denote is b with a hashtag sometimes you'll see a b with a sorry a b with an apostrophe sometimes you'll see b with a line over the top of it so that's also coming into the and gate so i'm anding a or b the output of this and not b going through here and then i'm going to not the whole thing to get d at the end so the expression d is equal to a or b it's coming in from up here and not b and the whole thing is knotted there's the little apostrophe there okay so it's a circuit what is a circuit it's a collection of gates or not and that's all i can do that takes a series of binary inputs one or more and outputs a series one or more of binary outputs that's a circuit now again this isn't a particularly meaningful in fact it's not at all meaningful and now what we want to ask ourselves is well okay now that i have a mechanism for creating a circuit that is a computation right we're going to take a bunch of binary inputs and create a bunch of binary outputs so imagine my binary inputs are two binary numbers i want to add and the output is the summation or my input is two things i want to compare if they're equal and my output is true or false and so the nature of computation is going to happen by pushing inputs a and b c and d whatever that is on the left-hand side through a series of gates and or not to get a series of outputs which hopefully are going to be meaningful computations okay so what we're going to do next is we're going to show how do you actually build meaningful computation now that we know what a circuit is and how we build the circuit from gates so that's the end for now and we'll pick it 