okay so the nature of computation using boolean operations and or not is we're going to build a circuit a collection of gates that transforms a binary input to a binary output that's what we just saw in the previous lecture and now what i'm going to take you through is a four-step process for going from what you want to compute to a circuit okay so i'm going to go through the four steps and then we're going to see a bunch of examples on really meaningful computations that you might see for example on a modern computer so the first thing we're going to do is we have to ask ourselves what is the input and what is the output okay so let me do an example where i have two in and two out i could have one in and three out i could have three in and four out that's irrelevant right now but we're going to start with just this simple example so four steps we're going to follow and the first step is to build the truth table for all possible input output values okay so if i have two inputs a and b my truth table must have two to the two four possible rows so i have to enumerate every possible pair of inputs so if i have three inputs i need eight rows if i have four inputs i need 16 rows i need two to the n rows because i have to enumerate every possible input nothing can be left out so if i have two inputs a and b i know what all the possibilities are they're 0 0 0 1 1 0 1 1. by the way notice this is the easiest way to build your truth table just count in binary 0 1 2 3 4 rows from 0 to 2 to the n minus 1 2 to the n total rows okay so that's the easy part so no matter what circuit i'm building those two with two inputs those four rows are going to be exactly the same that is the four possible inputs into the circuit and now i have to decide well what do i want the output to be okay so for now i'm going to just pick something arbitrary okay because this isn't again not a meaningful calculation like the previous circuit we did in the previous lecture eventually i'm going to do something more meaningful here but i want to take you through the four steps and then we're gonna start doing meaningful computation so what is my output i'm determining i'm just telling you this is your job this is the nature of the computation is that c should be a one when a is 0 1 and sorry when a is 1 and b is 0 or when a is 1 and b is 0 and it should be 0 otherwise and d should be 1 only when a is 1 and b is 1.
it's computation it doesn't really mean anything right now but again we'll see what meaningful computation is in a little bit so now i have a truth table i predetermine the rows that's super easy just enumerate all the possible uh set of inputs and then you tell me what the computation is you want if you want to add two things your output has to have something to do with summation for example and we'll see examples of that in a few minutes okay so these again are just arbitrary for now step two build sub expressions with and and not for each output column i have two output columns here this is really important you're going to build a sub expression i'm going to show you how to do it in a second and the only things you can use are and and not you can't use the ors yet and i'm going to explain a little bit why that is okay so how do you build those sub expressions all right so here's what we're going to do let's do d because this is a little bit easier and then we'll go back and do c so for each output column we are going to go down and find where there's a one ah there's a one right there okay and then so d is going to be equal to now obviously d must have something to do with a and b right because it's the output is the input rather is determining the output okay and so what we're going to do is we're going to say that d is equal to again i can only use and not so there's no not yet is equal to a and b and the reason i'm doing that is because a has a 1 here and b has a 1 here okay so so just logically what you're going to do is you're going to find the one you're going to go back into here and wherever you see a 1 you're going to use that variable when you when you see a 0 you're going to not it i'll show you an example of that in a minute and you're going to and the two together now let's ask ourselves why this makes sense all right let's see well first of all can we agree that column d is in fact the end of a and b sure because what's the and the and is that when a and b are one the output is one and it's zero everywhere else okay so look what i'm doing here i'm saying that when a is one there it is right there and when b is one the output is one and notice that sort of for free i get all the other rows of that output because for all other instant instances of this when a is zero or b is zero or they're both zero i get a zero so this little expression here that's it this little and embodies that entire output for those two inputs okay so let's see another example that's a little bit like we'll do c and we'll see exactly where this is coming from right now all right so c we're going to play the same game we're going to roll down we're going to see where do you see a one okay there it is right there and now i'm going to build the sub expression and i can only use ands or not ands and knots okay so i'm going to i'm going to roll over to the inputs and what do i have i have a 0 here so i'm going to not that and then i have a 1 here so i'm going to just carry that over and this c is equal to not a and b so let's make sure we understand that all right so when a is zero what is the not of a one when b is one b is one so the not of zero and one is one sure that's that one right there now unlike this one here this little expression doesn't capture everything why the only time the only time when this expression is 1 is when when a is zero and b is one i've captured that one row right here with this little sub expression but notice i have another one i have to capture i also care when a is one and b is zero my output should be one well so if i put a 1 into here that goes to a 0 b goes to a 0 that's not 1. so this little sub expression doesn't help me here doesn't it sort of helps me here we'll get back to that in a minute and sort of helps me here but it doesn't help me here i need another sub expression for there so now again we're going to go down c we've already captured that one sub expression let's capture the sub expression so now we go back to the input a is one so we just bring over a b is zero so we not it again let's make sure we understand that when a is one and b is zero i get one and one so i get c is equal to one and notice again it's the nature of and and is going to be 1 if and only if a is 1 b is 0 and this sub expression and in this sub expression a is 0 and b is 1.
and notice that's exactly what i want that's exactly what i want i want c to be 1 when a is 0 b is 1 or a is 1 and b is 0. so these two sub expressions capture those two rows of course i'm going to have to combine them i think you can sort of see how that's going to happen but we'll do in a minute but notice also that we're sort of getting this row and this row for free because for all other values of a so when c when a is 0 and b is 0 what is the sub expression zero what is this sub expression zero because that's a zero and that's a zero when a is one and b is one what's the sub expression well that goes to zero so the whole thing goes to zero and that goes to zero so the whole thing goes to zero so these two sub-expressions sort of for free and because of the nature of the and give me those two zeros for the first row and the fourth row okay all right good so we've now in step two we've built sub-expressions for each output column the d only needed one because there was only one here and the c needed two of them because there are two ones here now we're going to combine two at a time all the sub expressions with an or i mean you knew the ors were going to come into play so this is now step three step one is build the truth table step two is for each output column build a sub expression using and not only and step three says start to combine these things with an or okay so what is c let's go back to this one well we had one sub expression here which was not a and b we had another sub expression here which was a and not b and what is c i want c to be one when what is true when this is one or there it is right there this is one so i simply or those two sub expressions and now this expression right here this full expression of these two sub-expressions and the or of them captures that entire row for c because we've just convinced ourselves that the only time this is one is row two the only time this is one is row three and all other times it's zero so if i or those two together i get a one in these two cases and i got a zero elsewhere so now i now have a sub expression i have an expression rather that embodies the output c for all possible inputs a and b okay so what does the combination for d look like well there was only one sub expression so there's no oring to do this little sub expression now let me just call it an expression embodies the entire column for how i get d from a and b and notice it's just an and right because that's exactly what that column is okay step three now step four draw a circuit well what does that mean well what do i have at this point i have a truth table i have boolean expressions and or a not that tell me how to transform my input to my output using what logical and logical or logical not well if i can do things with and or not i can draw a circuit because that's exactly what a circuit is all right so let's draw the circuit this is now the fun part this is the easy part you're done so typically not always but typically we'll put the inputs on on the left sometimes we put them at the bottom running upwards when the circuits get complicated and output is on the right so there's going to be two inputs a and b those are the four rows that you saw on the truth table there's going to be two outputs c is going to come out up here of course and d is down here so let me do d first because that's the easy one so what is d it's the and of a and b so i take a i shove it into an and gate don't forget the dot there to remind yourself that's an and gate if your drawing is not very good i take the b and i shove it in here and i usually i like to write the expressions here because in the early days of this because it will remind me what i'm doing uh and then i drive that output to there and i get d so that's a really simple circuit with only one and gate all right so how do we do the c well the c is the result of oring two things that little sub expression right there and that little sub expression right there not a and b a and not b and there's my c are gonna or there all right so here's my and gate and i'm going to shove in i have to bring in not a there's my not gate i have to bring in not b there's my not gate and then of course a will come into here and b will come into here so we've got to feed them in from the inputs here so let me go ahead and do that now all right let's follow the line so notice that whenever i bifurcate or split off the signal i'm going to draw a solid dot to tell myself that the signal a is going into this and gate down here and it's going to go into this not gate and into this and gate okay so there's the a going in let's see where do i get the b from ah here it is right here okay so here's b i'm going to bifurcate and now notice i have an open circle here that's to tell me that two wires are just crossing on top of each other so i'm not taking um the input here i'm just gonna cross the wire i'm gonna bring it up i'm gonna bring it up i'm gonna bring it over and now i have not a and b all right same thing for the next one a is going to come in we're going to split the signal i'm crossing there's an open circle and i go into the and gate and then of course there's the b again i'm going to peel off the signal i'm going to shove it into a not gate i'm going to shove it into the and gate and then it's going to go those two are going to go into the or and there's my c so nothing complicated you can see that the wires can sometimes get a little complicated you've got to think how you want to lay these circuits out so usually i sometimes like to start at the back and then work my way this way because i know that there's going to be an or gate here and then i feed everything and moving backwards okay good so there are the four steps for designing a circuit again we haven't done anything meaningful in terms of actual computation that's going to come next but let's go ahead and just review the four steps step one first of all figure out what your input outputs are that's probably step zero tell me what you want to do input output so build a truth table for all possible input output values what does that mean if i have n inputs i have two to the n rows that enumerate every single possible set of inputs so the easiest way to do that is just start counting in binary from zero so if it's three inputs i do zero zero zero zero zero one zero one zero zero one one et cetera et cetera so you count and you should always have two to the n basically from zero to two the n minus one if you convert everything into uh base ten that's step one tell me what the output is what is the nature of your computation we'll see a bunch of examples of that in the next set of lectures two for each and notice that each output is separate from each other in that previous example d and c don't care about each other they're just separate they're completely separate in the truth table so for each column build a sub expression using only and and not no ors right now so how do you do that find the ones go back to the input and everything together and if it's a zero if it's a value of one you add it together and if the value of zero you not it and when you do that you get something that gives you a one for only that set of inputs and then in step three by ordering all of those sub expressions together i then get the entire column wherever there's a one and by design there is a zero everywhere else now i have an expression for each output column how do i transform my input to my output through a series of and or not and now i simply draw the diagram and there you have to get a little bit of practice to figure out where to draw things but we'll do a bunch of examples of that to see what that looks like good four simple steps for doing basic circuit design and now the only piece that's missing is well what does meaningful computation look like and that's what we're going to do next 