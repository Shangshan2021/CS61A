all right so we're going to build uh an adder we're going to let's go from these relatively simple circuits to something that you can really imagine a computer needing to do which is to add a bunch of numbers together so we're going to do this in two steps i'm going to build a one bit adder and then i'm going to show you how it generalizes to a four bit adder so in the same way we went from a one bit compare for a quality to a four bit compare for a body we're going to build this up a little bit slow so here's the task please build for me a circuit that adds two one-bit numbers so again remember we have to think in terms of bits so i have two numbers each of them are one bit so either it's a zero or a one and i'm going to add that either to a zero or a one okay all right so we know we have to do let's first start making sure that we let's start by understanding that we let's start by making sure that we understand uh how the the one bit edition work so here are my two bits i'm going to add bit 1 bit 2 let's call that a and b and let's just do the addition so zero plus zero of course is zero zero plus one is one and one plus zero is one it's it's uh that's that's easy all right what's one plus one well let's see so uh this is one and one and base ten one plus one is 2 what is 2 in binary it is 1 0. so now we have already got a little bit of a problem because here i only have one output right there was no carry but here i've i have some two outputs i have the sum which is zero but then there's like that carry or i have two bits out it's one zero so maybe i have to think about this a little bit different so carry and here's a good place to think about what's going to come next so eventually we're going to want to build a 4-bit an 8-bit and a 16-bit adder and to do that we're definitely going to want to be able to carry digits because when we stack two binary numbers on top of each other we need to carry uh information to the left as we sum so let's see so initially i was thinking i would just have two inputs a and b and one output c but maybe i should rethink that maybe the input should be two digits a and b and then possibly a carry and again this is all about thinking down the line a little bit when i go from a one bit to a two bit to four bit i'm going to stack these down and think about how you just add normal arithmetic you add the digits in the column but you potentially bring something over from the previous column so let's think about the binary addition in terms of now having three inputs a b and a possible carry and again that's going to allow us to generalize the circuit down the line okay now of course the output has to have more than just this it has to have an output which is what pushes down uh below the horizontal line but also gets carried out so now even this one bit addition has already gotten a little complicated we have two in plus a carry that's three in and then the output is what is the sum and then what is the carry over here so we're gonna have two outputs all right let's make sure we see what's all happening here so let's imagine i wanna sum i have a three bit representation and i wanna sum them up so let's first of all make sure this makes sense so one zero one remember this is two to the zero two to the one two to the two so this is four plus one which is five this is two to the zero which of course is just one and then five plus one is six so i'm gonna add these two numbers up and i better get six so let's start adding up and i want you to keep track of the these three in and two out okay all right so here i have clearly two digits what's the carry from the previous column there is none it's zero it's implicitly there's a zero up there because there's nothing there all right what's one plus one two what is two it is one zero so there it is i have two in plus an implicit carry of zero and my output is what do i carry to the next column that's one and what do i bring down that's zero okay good now you can see my three inputs i'm going to sum that carry from the previous column plus zero plus zero what is that that's one so i bring the zero down and implicitly i'm bringing the zero over to the next one so and then i've got zero plus one plus zero and of course that is one and of course if i if i do the calculation here that is 2 to the 2 2 to the 1 2 to the 0 so it's 4 plus 2 which is 6. okay so 2-bit addition if we are eventually going to want to generalize this to 3 4 5 seven eight bit edition we now have three ins what are the two digits you're summing plus a possible carry and we have two outs what comes down and what carries over to the next column three and two outs good so look at how much work by the way we had to do just to establish what the input output is okay but this is sort of the hard part now we've established what the problem is we've established how to define it and now we just have to start building a truth table sub expressions expression circuitry okay so i have three ins a k i should let me call this a carry in and a carry out yeah so it's what's coming in and then what's going out okay three and two out all right good let's build a truth table all right truth table has three columns if it has three columns it has how many rows two to the power three which is eight and the way you populate it is simply by counting in binary from zero to eight minus one seven so zero zero zero zero zero one zero one zero et cetera et cetera et cetera so here are my eight rows associated with the three input columns those have to again enumerate every single possible pair of inputs and now i have to tell you what is going to be the sum that comes down and the carry that goes over so again these are the two digits we're summing plus a possible carry that's the carry in this is the sum and the carry out okay so now we've just got arithmetic we're going to tell the computer what the answer is and the same way we did for the compare for equality i'm going to do this the addition for you and then the circuitry is simply going to implement those rules all right let's start going through it all right 0 plus zero is zero and there's zero carrying okay that one's easy what is zero plus zero plus one it's one so the one comes here what's the carry out zero there's nothing to carry there's no overflow okay that's easy let's look at this one so what's 0 plus 1 plus 0 well it's still 1 it's actually the same as this right i don't care what the order of these bits are so no reason to do extra work here once i know there's only one one here i know what the answer is it's going to be 1 0.
okay so that one's easy now ah this one let's think about this this is 0 plus 1 plus 1 that's 2. so what is 2 in binary carry the 1 drop the 0. so that's going to be a 0 here that's what comes down and the 1 is what carries over to the next column this one's easy there's only one one so we know what the answer is 1 0.
this one's easy there's two ones here the answer is 2. it's the same as that 0 comes down carry is one this one's easy right work smart we've already done the work no reason to do the calculation now let's do the last one one plus one plus one is of course three what is three in binary it's one one drop the one carry the one so now c is d is one and e is one good now really truly all the hard work is done now we gotta just start turning the crank on sub expressions expressions and circuitry so i have three n's two outs i've established what the value of the sum and the carry out is for all possible inputs and now let's start building up the sub-expressions okay remember how the sub-expressions work you treat each output column separately the d and the e output column are completely independent of each other we're going to identify wherever there's a one and then here here here and here we're going to build a sub expression using only and and not and then we're going to combine those sub expressions using the or operator and then once we have the final expression of course we're going to draw some circuitry so let's get started all right let's start with d i've isolated one two three four ones here so what is the sub expression associated with this remember you go back to the input variables if it's a one you not if it's a zero you not it if it's a zero you not it if it's a one you carry it over so this sub expression should be not a and not b and c okay easy to do but again remember what you're doing you're looking for an expression that is a one in one and only one situation when a is zero b is zero and c is one so if i not these two they turn to one that one's a one the only time that little sub expression which i'll draw right here is one is in that little row right there so not a not b and c all right let's do the next one what is it not a b not c good there it is right there and then let's just do the last two so this one is a not b and not c and last one is easy a b and c good so there are my four sub expressions corresponding to wherever there's a one on the output channel i won't go through these again i think we not would know what the rule is so this one for example is not a b and c and these three you can uh derive from this right here so i have four sub expressions for d i have four sub expressions for e and now i'm ready to put them together in an expression and then we can draw the circuit all right so what's the expression this sub expression is one on this row only the sub expression is one on this row only and so on and so forth i want my output d to be a one if this is true or this is true or this is true or this is true so i simply or all the sub expressions together okay there's the expression right there super easy this same thing it's a one on this this this this i want the or of them so i'm going to combine them with three or gates so now i have full on expressions for d and e and now i'm ready to build my one bit add okay so here is the one bit adder now in the past what we have done is we've brought in the input from the far left and the output is on the right i've done things a little bit differently you can see down here the inputs are coming from the bottom up and then the outputs are here so again a and b are the two inputs c is the carry in d is the sum uh and e is the carry out okay so the reason i've done it this way is i'm going to take these three inputs here and i'm going to drive them all the way to the top and then notice the three knot gates here i'm peeling off the signal to the not gate i'm going to drive those all the way up and then i just feed the signal and the knot of the signal into the and gates into the and gates down here and then into the or gates and the color coding here of course is the red corresponds to the d output and the blue corresponds to the e output the and gates here are of course from the original sub expression and then the ors those three ors are summing them up to get the final output and notice here that there's a fair amount of circuitry here even for this really simple one-bit adder you need a fair amount of circuitry and so what we're going to talk about next is you know what can we do to reduce that circuitry and what happens as these things start to get more complicated and also what happens when i try to build for example a four bit adder and suddenly i have to draw lots of these different gates and things get complicated very fast we're gonna see how we can think about these larger more complex circuits so we'll pick it up in a little bit 